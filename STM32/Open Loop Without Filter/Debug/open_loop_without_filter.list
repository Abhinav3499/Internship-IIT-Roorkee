
open_loop_without_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005e00  08005e00  00006e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e74  08005e74  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e7c  08005e7c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e7c  08005e7c  00006e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e80  08005e80  00006e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005e84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000002b4  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000310  20000310  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107bf  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd5  00000000  00000000  0001784b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00019820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6c  00000000  00000000  0001a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223be  00000000  00000000  0001b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137a7  00000000  00000000  0003d5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d916e  00000000  00000000  00050d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129edf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042ac  00000000  00000000  00129f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0012e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005de8 	.word	0x08005de8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005de8 	.word	0x08005de8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fbeb 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f83d 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f9fb 	bl	8000698 <MX_GPIO_Init>
  MX_RTC_Init();
 80002a2:	f000 f915 	bl	80004d0 <MX_RTC_Init>
  MX_ADC1_Init();
 80002a6:	f000 f8a3 	bl	80003f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80002aa:	f000 f937 	bl	800051c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80002ae:	f000 f9c3 	bl	8000638 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char uartBuf[30];

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002b2:	2100      	movs	r1, #0
 80002b4:	4813      	ldr	r0, [pc, #76]	@ (8000304 <main+0x74>)
 80002b6:	f003 fd27 	bl	8003d08 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
        HAL_ADC_Start(&hadc1);
 80002ba:	4813      	ldr	r0, [pc, #76]	@ (8000308 <main+0x78>)
 80002bc:	f000 fe38 	bl	8000f30 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002c0:	f04f 31ff 	mov.w	r1, #4294967295
 80002c4:	4810      	ldr	r0, [pc, #64]	@ (8000308 <main+0x78>)
 80002c6:	f000 ff49 	bl	800115c <HAL_ADC_PollForConversion>
        adcVal = HAL_ADC_GetValue(&hadc1);
 80002ca:	480f      	ldr	r0, [pc, #60]	@ (8000308 <main+0x78>)
 80002cc:	f001 f848 	bl	8001360 <HAL_ADC_GetValue>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <main+0x7c>)
 80002d6:	801a      	strh	r2, [r3, #0]

        // Send ADC value over UART
        sprintf(uartBuf, "%d\r\n", adcVal);
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <main+0x7c>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	463b      	mov	r3, r7
 80002e0:	490b      	ldr	r1, [pc, #44]	@ (8000310 <main+0x80>)
 80002e2:	4618      	mov	r0, r3
 80002e4:	f005 f8e0 	bl	80054a8 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff78 	bl	80001e0 <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	b29a      	uxth	r2, r3
 80002f4:	4639      	mov	r1, r7
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295
 80002fa:	4806      	ldr	r0, [pc, #24]	@ (8000314 <main+0x84>)
 80002fc:	f004 fc5a 	bl	8004bb4 <HAL_UART_Transmit>
        HAL_ADC_Start(&hadc1);
 8000300:	bf00      	nop
 8000302:	e7da      	b.n	80002ba <main+0x2a>
 8000304:	200000e8 	.word	0x200000e8
 8000308:	20000078 	.word	0x20000078
 800030c:	200001bc 	.word	0x200001bc
 8000310:	08005e00 	.word	0x08005e00
 8000314:	20000134 	.word	0x20000134

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b0a6      	sub	sp, #152	@ 0x98
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000322:	2228      	movs	r2, #40	@ 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f005 f8e0 	bl	80054ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2258      	movs	r2, #88	@ 0x58
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f005 f8d2 	bl	80054ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000348:	230a      	movs	r3, #10
 800034a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	2310      	movs	r3, #16
 8000352:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800036e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800037c:	4618      	mov	r0, r3
 800037e:	f001 ff13 	bl	80021a8 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000388:	f000 f9aa 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2302      	movs	r3, #2
 8000392:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800039c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003a6:	2102      	movs	r1, #2
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 ff21 	bl	80031f0 <HAL_RCC_ClockConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003b4:	f000 f994 	bl	80006e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <SystemClock_Config+0xd4>)
 80003ba:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80003ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003cc:	2300      	movs	r3, #0
 80003ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 f91e 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80003de:	f000 f97f 	bl	80006e0 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3798      	adds	r7, #152	@ 0x98
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	00011082 	.word	0x00011082

080003f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	@ 0x28
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003f6:	f107 031c 	add.w	r3, r7, #28
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000412:	4b2e      	ldr	r3, [pc, #184]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000414:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041a:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000426:	4b29      	ldr	r3, [pc, #164]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042c:	4b27      	ldr	r3, [pc, #156]	@ (80004cc <MX_ADC1_Init+0xdc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b26      	ldr	r3, [pc, #152]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043a:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <MX_ADC1_Init+0xdc>)
 800043c:	2200      	movs	r2, #0
 800043e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	4b22      	ldr	r3, [pc, #136]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000442:	2201      	movs	r2, #1
 8000444:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000446:	4b21      	ldr	r3, [pc, #132]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800044c:	4b1f      	ldr	r3, [pc, #124]	@ (80004cc <MX_ADC1_Init+0xdc>)
 800044e:	2201      	movs	r2, #1
 8000450:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b1e      	ldr	r3, [pc, #120]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800045a:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <MX_ADC1_Init+0xdc>)
 800045c:	2204      	movs	r2, #4
 800045e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000466:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000468:	2200      	movs	r2, #0
 800046a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046c:	4817      	ldr	r0, [pc, #92]	@ (80004cc <MX_ADC1_Init+0xdc>)
 800046e:	f000 fb65 	bl	8000b3c <HAL_ADC_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000478:	f000 f932 	bl	80006e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	4619      	mov	r1, r3
 8000486:	4811      	ldr	r0, [pc, #68]	@ (80004cc <MX_ADC1_Init+0xdc>)
 8000488:	f001 fa62 	bl	8001950 <HAL_ADCEx_MultiModeConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000492:	f000 f925 	bl	80006e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000496:	2301      	movs	r3, #1
 8000498:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049a:	2301      	movs	r3, #1
 800049c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	@ (80004cc <MX_ADC1_Init+0xdc>)
 80004b4:	f000 ff62 	bl	800137c <HAL_ADC_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004be:	f000 f90f 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	3728      	adds	r7, #40	@ 0x28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000078 	.word	0x20000078

080004d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <MX_RTC_Init+0x44>)
 80004d6:	4a10      	ldr	r2, [pc, #64]	@ (8000518 <MX_RTC_Init+0x48>)
 80004d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <MX_RTC_Init+0x44>)
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <MX_RTC_Init+0x44>)
 80004e2:	227f      	movs	r2, #127	@ 0x7f
 80004e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <MX_RTC_Init+0x44>)
 80004e8:	22ff      	movs	r2, #255	@ 0xff
 80004ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <MX_RTC_Init+0x44>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <MX_RTC_Init+0x44>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_RTC_Init+0x44>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_RTC_Init+0x44>)
 8000500:	f003 faa4 	bl	8003a4c <HAL_RTC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800050a:	f000 f8e9 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000c8 	.word	0x200000c8
 8000518:	40002800 	.word	0x40002800

0800051c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	@ 0x58
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000522:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800052e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	222c      	movs	r2, #44	@ 0x2c
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f004 ffcf 	bl	80054ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800054e:	4b38      	ldr	r3, [pc, #224]	@ (8000630 <MX_TIM1_Init+0x114>)
 8000550:	4a38      	ldr	r2, [pc, #224]	@ (8000634 <MX_TIM1_Init+0x118>)
 8000552:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000554:	4b36      	ldr	r3, [pc, #216]	@ (8000630 <MX_TIM1_Init+0x114>)
 8000556:	2247      	movs	r2, #71	@ 0x47
 8000558:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055a:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <MX_TIM1_Init+0x114>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000560:	4b33      	ldr	r3, [pc, #204]	@ (8000630 <MX_TIM1_Init+0x114>)
 8000562:	2263      	movs	r2, #99	@ 0x63
 8000564:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <MX_TIM1_Init+0x114>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800056c:	4b30      	ldr	r3, [pc, #192]	@ (8000630 <MX_TIM1_Init+0x114>)
 800056e:	2200      	movs	r2, #0
 8000570:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <MX_TIM1_Init+0x114>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000578:	482d      	ldr	r0, [pc, #180]	@ (8000630 <MX_TIM1_Init+0x114>)
 800057a:	f003 fb6d 	bl	8003c58 <HAL_TIM_PWM_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000584:	f000 f8ac 	bl	80006e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000588:	2300      	movs	r3, #0
 800058a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800058c:	2300      	movs	r3, #0
 800058e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000594:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000598:	4619      	mov	r1, r3
 800059a:	4825      	ldr	r0, [pc, #148]	@ (8000630 <MX_TIM1_Init+0x114>)
 800059c:	f004 f9aa 	bl	80048f4 <HAL_TIMEx_MasterConfigSynchronization>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80005a6:	f000 f89b 	bl	80006e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005aa:	2360      	movs	r3, #96	@ 0x60
 80005ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 30;
 80005ae:	231e      	movs	r3, #30
 80005b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005be:	2300      	movs	r3, #0
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005ca:	2200      	movs	r2, #0
 80005cc:	4619      	mov	r1, r3
 80005ce:	4818      	ldr	r0, [pc, #96]	@ (8000630 <MX_TIM1_Init+0x114>)
 80005d0:	f003 fca6 	bl	8003f20 <HAL_TIM_PWM_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80005da:	f000 f881 	bl	80006e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000600:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000604:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800060a:	2300      	movs	r3, #0
 800060c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4807      	ldr	r0, [pc, #28]	@ (8000630 <MX_TIM1_Init+0x114>)
 8000614:	f004 f9fa 	bl	8004a0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800061e:	f000 f85f 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000622:	4803      	ldr	r0, [pc, #12]	@ (8000630 <MX_TIM1_Init+0x114>)
 8000624:	f000 f908 	bl	8000838 <HAL_TIM_MspPostInit>

}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	@ 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000e8 	.word	0x200000e8
 8000634:	40012c00 	.word	0x40012c00

08000638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <MX_USART2_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <MX_USART2_UART_Init+0x58>)
 800067c:	f004 fa4c 	bl	8004b18 <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 f82b 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000134 	.word	0x20000134
 8000694:	40004400 	.word	0x40004400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_GPIO_Init+0x44>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <MX_GPIO_Init+0x44>)
 80006a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_GPIO_Init+0x44>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_GPIO_Init+0x44>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <MX_GPIO_Init+0x44>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_GPIO_Init+0x44>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_MspInit+0x44>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <HAL_MspInit+0x44>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <HAL_MspInit+0x44>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_MspInit+0x44>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <HAL_MspInit+0x44>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_MspInit+0x44>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000754:	d124      	bne.n	80007a0 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <HAL_ADC_MspInit+0x74>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <HAL_ADC_MspInit+0x74>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_ADC_MspInit+0x74>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HAL_ADC_MspInit+0x74>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a0d      	ldr	r2, [pc, #52]	@ (80007a8 <HAL_ADC_MspInit+0x74>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <HAL_ADC_MspInit+0x74>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078a:	2303      	movs	r3, #3
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079c:	f001 fb7a 	bl	8001e94 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	@ 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <HAL_RTC_MspInit+0x44>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d111      	bne.n	80007e2 <HAL_RTC_MspInit+0x36>
 80007be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007c2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	fa93 f3a3 	rbit	r3, r3
 80007ca:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007cc:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007ce:	fab3 f383 	clz	r3, r3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <HAL_RTC_MspInit+0x48>)
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	461a      	mov	r2, r3
 80007de:	2301      	movs	r3, #1
 80007e0:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40002800 	.word	0x40002800
 80007f4:	10908100 	.word	0x10908100

080007f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_TIM_PWM_MspInit+0x38>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d10b      	bne.n	8000822 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_TIM_PWM_MspInit+0x3c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a09      	ldr	r2, [pc, #36]	@ (8000834 <HAL_TIM_PWM_MspInit+0x3c>)
 8000810:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <HAL_TIM_PWM_MspInit+0x3c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40012c00 	.word	0x40012c00
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a11      	ldr	r2, [pc, #68]	@ (800089c <HAL_TIM_MspPostInit+0x64>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d11b      	bne.n	8000892 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_TIM_MspPostInit+0x68>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <HAL_TIM_MspPostInit+0x68>)
 8000860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <HAL_TIM_MspPostInit+0x68>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000872:	2301      	movs	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <HAL_TIM_MspPostInit+0x6c>)
 800088e:	f001 fb01 	bl	8001e94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40012c00 	.word	0x40012c00
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000800 	.word	0x48000800

080008a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <HAL_UART_MspInit+0x7c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d128      	bne.n	800091c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ca:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <HAL_UART_MspInit+0x80>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a16      	ldr	r2, [pc, #88]	@ (8000928 <HAL_UART_MspInit+0x80>)
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_UART_MspInit+0x80>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_UART_MspInit+0x80>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a10      	ldr	r2, [pc, #64]	@ (8000928 <HAL_UART_MspInit+0x80>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_UART_MspInit+0x80>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008fa:	230c      	movs	r3, #12
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090a:	2307      	movs	r3, #7
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000918:	f001 fabc 	bl	8001e94 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40004400 	.word	0x40004400
 8000928:	40021000 	.word	0x40021000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <NMI_Handler+0x4>

08000934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <MemManage_Handler+0x4>

08000944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <UsageFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f8bb 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f004 fd9e 	bl	80054fc <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20010000 	.word	0x20010000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	200001c0 	.word	0x200001c0
 80009f4:	20000310 	.word	0x20000310

080009f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff ffea 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	@ (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f004 fd5d 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4e:	f7ff fc1f 	bl	8000290 <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a60:	08005e84 	.word	0x08005e84
  ldr r2, =_sbss
 8000a64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a68:	20000310 	.word	0x20000310

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f001 f9d3 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fe2e 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 f9dd 	bl	8001e7a <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f001 f9b3 	bl	8001e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200001c4 	.word	0x200001c4

08000b24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200001c4 	.word	0x200001c4

08000b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09a      	sub	sp, #104	@ 0x68
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e1e3      	b.n	8000f24 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d176      	bne.n	8000c5c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d152      	bne.n	8000c1c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fdcf 	bl	8000734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d13b      	bne.n	8000c1c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f001 f829 	bl	8001bfc <ADC_Disable>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12f      	bne.n	8000c1c <HAL_ADC_Init+0xe0>
 8000bbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d12b      	bne.n	8000c1c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bcc:	f023 0302 	bic.w	r3, r3, #2
 8000bd0:	f043 0202 	orr.w	r2, r3, #2
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000be6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000bf6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bf8:	4b92      	ldr	r3, [pc, #584]	@ (8000e44 <HAL_ADC_Init+0x308>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a92      	ldr	r2, [pc, #584]	@ (8000e48 <HAL_ADC_Init+0x30c>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	0c9a      	lsrs	r2, r3, #18
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c0e:	e002      	b.n	8000c16 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f9      	bne.n	8000c10 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c38:	d110      	bne.n	8000c5c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f023 0312 	bic.w	r3, r3, #18
 8000c42:	f043 0210 	orr.w	r2, r3, #16
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f043 0201 	orr.w	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 8150 	bne.w	8000f0a <HAL_ADC_Init+0x3ce>
 8000c6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 814b 	bne.w	8000f0a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8143 	bne.w	8000f0a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c8c:	f043 0202 	orr.w	r2, r3, #2
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c9c:	d004      	beq.n	8000ca8 <HAL_ADC_Init+0x16c>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a6a      	ldr	r2, [pc, #424]	@ (8000e4c <HAL_ADC_Init+0x310>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_ADC_Init+0x170>
 8000ca8:	4b69      	ldr	r3, [pc, #420]	@ (8000e50 <HAL_ADC_Init+0x314>)
 8000caa:	e000      	b.n	8000cae <HAL_ADC_Init+0x172>
 8000cac:	4b69      	ldr	r3, [pc, #420]	@ (8000e54 <HAL_ADC_Init+0x318>)
 8000cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cb8:	d102      	bne.n	8000cc0 <HAL_ADC_Init+0x184>
 8000cba:	4b64      	ldr	r3, [pc, #400]	@ (8000e4c <HAL_ADC_Init+0x310>)
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e01a      	b.n	8000cf6 <HAL_ADC_Init+0x1ba>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a61      	ldr	r2, [pc, #388]	@ (8000e4c <HAL_ADC_Init+0x310>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d103      	bne.n	8000cd2 <HAL_ADC_Init+0x196>
 8000cca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	e011      	b.n	8000cf6 <HAL_ADC_Init+0x1ba>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a60      	ldr	r2, [pc, #384]	@ (8000e58 <HAL_ADC_Init+0x31c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d102      	bne.n	8000ce2 <HAL_ADC_Init+0x1a6>
 8000cdc:	4b5f      	ldr	r3, [pc, #380]	@ (8000e5c <HAL_ADC_Init+0x320>)
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e009      	b.n	8000cf6 <HAL_ADC_Init+0x1ba>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a5d      	ldr	r2, [pc, #372]	@ (8000e5c <HAL_ADC_Init+0x320>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d102      	bne.n	8000cf2 <HAL_ADC_Init+0x1b6>
 8000cec:	4b5a      	ldr	r3, [pc, #360]	@ (8000e58 <HAL_ADC_Init+0x31c>)
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e001      	b.n	8000cf6 <HAL_ADC_Init+0x1ba>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <HAL_ADC_Init+0x1da>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Init+0x1da>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <HAL_ADC_Init+0x1dc>
 8000d16:	2300      	movs	r3, #0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d11c      	bne.n	8000d56 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d010      	beq.n	8000d44 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d107      	bne.n	8000d3e <HAL_ADC_Init+0x202>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_ADC_Init+0x202>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <HAL_ADC_Init+0x204>
 8000d3e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d108      	bne.n	8000d56 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d54:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7e5b      	ldrb	r3, [r3, #25]
 8000d5a:	035b      	lsls	r3, r3, #13
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d002      	beq.n	8000d6a <HAL_ADC_Init+0x22e>
 8000d64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d68:	e000      	b.n	8000d6c <HAL_ADC_Init+0x230>
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11b      	bne.n	8000dc2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7e5b      	ldrb	r3, [r3, #25]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d96:	3b01      	subs	r3, #1
 8000d98:	045a      	lsls	r2, r3, #17
 8000d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000da4:	e00d      	b.n	8000dc2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000dae:	f043 0220 	orr.w	r2, r3, #32
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d054      	beq.n	8000e74 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a22      	ldr	r2, [pc, #136]	@ (8000e58 <HAL_ADC_Init+0x31c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d004      	beq.n	8000dde <HAL_ADC_Init+0x2a2>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a20      	ldr	r2, [pc, #128]	@ (8000e5c <HAL_ADC_Init+0x320>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d140      	bne.n	8000e60 <HAL_ADC_Init+0x324>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000de6:	d02a      	beq.n	8000e3e <HAL_ADC_Init+0x302>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000df0:	d022      	beq.n	8000e38 <HAL_ADC_Init+0x2fc>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000dfa:	d01a      	beq.n	8000e32 <HAL_ADC_Init+0x2f6>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e00:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000e04:	d012      	beq.n	8000e2c <HAL_ADC_Init+0x2f0>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000e0e:	d00a      	beq.n	8000e26 <HAL_ADC_Init+0x2ea>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e14:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000e18:	d002      	beq.n	8000e20 <HAL_ADC_Init+0x2e4>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1e:	e023      	b.n	8000e68 <HAL_ADC_Init+0x32c>
 8000e20:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e24:	e020      	b.n	8000e68 <HAL_ADC_Init+0x32c>
 8000e26:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e2a:	e01d      	b.n	8000e68 <HAL_ADC_Init+0x32c>
 8000e2c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e30:	e01a      	b.n	8000e68 <HAL_ADC_Init+0x32c>
 8000e32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e36:	e017      	b.n	8000e68 <HAL_ADC_Init+0x32c>
 8000e38:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000e3c:	e014      	b.n	8000e68 <HAL_ADC_Init+0x32c>
 8000e3e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000e42:	e011      	b.n	8000e68 <HAL_ADC_Init+0x32c>
 8000e44:	20000000 	.word	0x20000000
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	50000100 	.word	0x50000100
 8000e50:	50000300 	.word	0x50000300
 8000e54:	50000700 	.word	0x50000700
 8000e58:	50000400 	.word	0x50000400
 8000e5c:	50000500 	.word	0x50000500
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e70:	4313      	orrs	r3, r2
 8000e72:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d114      	bne.n	8000eac <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e90:	f023 0302 	bic.w	r3, r3, #2
 8000e94:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7e1b      	ldrb	r3, [r3, #24]
 8000e9a:	039a      	lsls	r2, r3, #14
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <HAL_ADC_Init+0x3f0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f023 010f 	bic.w	r1, r3, #15
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ee0:	e007      	b.n	8000ef2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 020f 	bic.w	r2, r2, #15
 8000ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	f023 0303 	bic.w	r3, r3, #3
 8000f00:	f043 0201 	orr.w	r2, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f08:	e00a      	b.n	8000f20 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f023 0312 	bic.w	r3, r3, #18
 8000f12:	f043 0210 	orr.w	r2, r3, #16
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3768      	adds	r7, #104	@ 0x68
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	fff0c007 	.word	0xfff0c007

08000f30 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f040 80f9 	bne.w	800113e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Start+0x2a>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e0f4      	b.n	8001144 <HAL_ADC_Start+0x214>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fde6 	bl	8001b34 <ADC_Enable>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 80e0 	bne.w	8001134 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f90:	d004      	beq.n	8000f9c <HAL_ADC_Start+0x6c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6d      	ldr	r2, [pc, #436]	@ (800114c <HAL_ADC_Start+0x21c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d106      	bne.n	8000faa <HAL_ADC_Start+0x7a>
 8000f9c:	4b6c      	ldr	r3, [pc, #432]	@ (8001150 <HAL_ADC_Start+0x220>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d010      	beq.n	8000fca <HAL_ADC_Start+0x9a>
 8000fa8:	e005      	b.n	8000fb6 <HAL_ADC_Start+0x86>
 8000faa:	4b6a      	ldr	r3, [pc, #424]	@ (8001154 <HAL_ADC_Start+0x224>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d009      	beq.n	8000fca <HAL_ADC_Start+0x9a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fbe:	d004      	beq.n	8000fca <HAL_ADC_Start+0x9a>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a64      	ldr	r2, [pc, #400]	@ (8001158 <HAL_ADC_Start+0x228>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d115      	bne.n	8000ff6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d036      	beq.n	8001052 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ff4:	e02d      	b.n	8001052 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800100a:	d004      	beq.n	8001016 <HAL_ADC_Start+0xe6>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a4e      	ldr	r2, [pc, #312]	@ (800114c <HAL_ADC_Start+0x21c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10a      	bne.n	800102c <HAL_ADC_Start+0xfc>
 8001016:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	e008      	b.n	800103e <HAL_ADC_Start+0x10e>
 800102c:	4b4a      	ldr	r3, [pc, #296]	@ (8001158 <HAL_ADC_Start+0x228>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf14      	ite	ne
 8001038:	2301      	movne	r3, #1
 800103a:	2300      	moveq	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800104a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800105a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800105e:	d106      	bne.n	800106e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001064:	f023 0206 	bic.w	r2, r3, #6
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	645a      	str	r2, [r3, #68]	@ 0x44
 800106c:	e002      	b.n	8001074 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	221c      	movs	r2, #28
 8001082:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800108c:	d004      	beq.n	8001098 <HAL_ADC_Start+0x168>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a2e      	ldr	r2, [pc, #184]	@ (800114c <HAL_ADC_Start+0x21c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d106      	bne.n	80010a6 <HAL_ADC_Start+0x176>
 8001098:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <HAL_ADC_Start+0x220>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d03e      	beq.n	8001122 <HAL_ADC_Start+0x1f2>
 80010a4:	e005      	b.n	80010b2 <HAL_ADC_Start+0x182>
 80010a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <HAL_ADC_Start+0x224>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d037      	beq.n	8001122 <HAL_ADC_Start+0x1f2>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_Start+0x196>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a22      	ldr	r2, [pc, #136]	@ (800114c <HAL_ADC_Start+0x21c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d106      	bne.n	80010d4 <HAL_ADC_Start+0x1a4>
 80010c6:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <HAL_ADC_Start+0x220>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	d027      	beq.n	8001122 <HAL_ADC_Start+0x1f2>
 80010d2:	e005      	b.n	80010e0 <HAL_ADC_Start+0x1b0>
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <HAL_ADC_Start+0x224>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2b05      	cmp	r3, #5
 80010de:	d020      	beq.n	8001122 <HAL_ADC_Start+0x1f2>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e8:	d004      	beq.n	80010f4 <HAL_ADC_Start+0x1c4>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a17      	ldr	r2, [pc, #92]	@ (800114c <HAL_ADC_Start+0x21c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d106      	bne.n	8001102 <HAL_ADC_Start+0x1d2>
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_ADC_Start+0x220>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d010      	beq.n	8001122 <HAL_ADC_Start+0x1f2>
 8001100:	e005      	b.n	800110e <HAL_ADC_Start+0x1de>
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_ADC_Start+0x224>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	2b09      	cmp	r3, #9
 800110c:	d009      	beq.n	8001122 <HAL_ADC_Start+0x1f2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001116:	d004      	beq.n	8001122 <HAL_ADC_Start+0x1f2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <HAL_ADC_Start+0x228>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10f      	bne.n	8001142 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0204 	orr.w	r2, r2, #4
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	e006      	b.n	8001142 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800113c:	e001      	b.n	8001142 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800113e:	2302      	movs	r3, #2
 8001140:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001142:	7bfb      	ldrb	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	50000100 	.word	0x50000100
 8001150:	50000300 	.word	0x50000300
 8001154:	50000700 	.word	0x50000700
 8001158:	50000400 	.word	0x50000400

0800115c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d102      	bne.n	8001178 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001172:	2308      	movs	r3, #8
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e03a      	b.n	80011ee <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001180:	d004      	beq.n	800118c <HAL_ADC_PollForConversion+0x30>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a72      	ldr	r2, [pc, #456]	@ (8001350 <HAL_ADC_PollForConversion+0x1f4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_ADC_PollForConversion+0x34>
 800118c:	4b71      	ldr	r3, [pc, #452]	@ (8001354 <HAL_ADC_PollForConversion+0x1f8>)
 800118e:	e000      	b.n	8001192 <HAL_ADC_PollForConversion+0x36>
 8001190:	4b71      	ldr	r3, [pc, #452]	@ (8001358 <HAL_ADC_PollForConversion+0x1fc>)
 8001192:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2b00      	cmp	r3, #0
 800119e:	d112      	bne.n	80011c6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d11d      	bne.n	80011ea <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f043 0220 	orr.w	r2, r3, #32
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0bf      	b.n	8001346 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f043 0220 	orr.w	r2, r3, #32
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0ad      	b.n	8001346 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80011ea:	230c      	movs	r3, #12
 80011ec:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011f6:	d004      	beq.n	8001202 <HAL_ADC_PollForConversion+0xa6>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a54      	ldr	r2, [pc, #336]	@ (8001350 <HAL_ADC_PollForConversion+0x1f4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d106      	bne.n	8001210 <HAL_ADC_PollForConversion+0xb4>
 8001202:	4b54      	ldr	r3, [pc, #336]	@ (8001354 <HAL_ADC_PollForConversion+0x1f8>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 031f 	and.w	r3, r3, #31
 800120a:	2b00      	cmp	r3, #0
 800120c:	d010      	beq.n	8001230 <HAL_ADC_PollForConversion+0xd4>
 800120e:	e005      	b.n	800121c <HAL_ADC_PollForConversion+0xc0>
 8001210:	4b51      	ldr	r3, [pc, #324]	@ (8001358 <HAL_ADC_PollForConversion+0x1fc>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <HAL_ADC_PollForConversion+0xd4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001224:	d004      	beq.n	8001230 <HAL_ADC_PollForConversion+0xd4>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a4c      	ldr	r2, [pc, #304]	@ (800135c <HAL_ADC_PollForConversion+0x200>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d104      	bne.n	800123a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	e00f      	b.n	800125a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	d004      	beq.n	800124e <HAL_ADC_PollForConversion+0xf2>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a41      	ldr	r2, [pc, #260]	@ (8001350 <HAL_ADC_PollForConversion+0x1f4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d102      	bne.n	8001254 <HAL_ADC_PollForConversion+0xf8>
 800124e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001252:	e000      	b.n	8001256 <HAL_ADC_PollForConversion+0xfa>
 8001254:	4b41      	ldr	r3, [pc, #260]	@ (800135c <HAL_ADC_PollForConversion+0x200>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800125a:	f7ff fc63 	bl	8000b24 <HAL_GetTick>
 800125e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001260:	e021      	b.n	80012a6 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d01d      	beq.n	80012a6 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <HAL_ADC_PollForConversion+0x124>
 8001270:	f7ff fc58 	bl	8000b24 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d212      	bcs.n	80012a6 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10b      	bne.n	80012a6 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f043 0204 	orr.w	r2, r3, #4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e04f      	b.n	8001346 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0d6      	beq.n	8001262 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d131      	bne.n	8001332 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d12c      	bne.n	8001332 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d125      	bne.n	8001332 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d112      	bne.n	800131a <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	@ 0x40
 8001318:	e00b      	b.n	8001332 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f043 0220 	orr.w	r2, r3, #32
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d103      	bne.n	8001344 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	50000100 	.word	0x50000100
 8001354:	50000300 	.word	0x50000300
 8001358:	50000700 	.word	0x50000700
 800135c:	50000400 	.word	0x50000400

08001360 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800137c:	b480      	push	{r7}
 800137e:	b09b      	sub	sp, #108	@ 0x6c
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_ADC_ConfigChannel+0x22>
 800139a:	2302      	movs	r3, #2
 800139c:	e2c8      	b.n	8001930 <HAL_ADC_ConfigChannel+0x5b4>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f040 82ac 	bne.w	800190e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d81c      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	461a      	mov	r2, r3
 80013d2:	231f      	movs	r3, #31
 80013d4:	4093      	lsls	r3, r2
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4019      	ands	r1, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa00 f203 	lsl.w	r2, r0, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f6:	e063      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b09      	cmp	r3, #9
 80013fe:	d81e      	bhi.n	800143e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	3b1e      	subs	r3, #30
 8001414:	221f      	movs	r2, #31
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	4019      	ands	r1, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	3b1e      	subs	r3, #30
 8001430:	fa00 f203 	lsl.w	r2, r0, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	635a      	str	r2, [r3, #52]	@ 0x34
 800143c:	e040      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b0e      	cmp	r3, #14
 8001444:	d81e      	bhi.n	8001484 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	3b3c      	subs	r3, #60	@ 0x3c
 800145a:	221f      	movs	r2, #31
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	4019      	ands	r1, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	3b3c      	subs	r3, #60	@ 0x3c
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	639a      	str	r2, [r3, #56]	@ 0x38
 8001482:	e01d      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	3b5a      	subs	r3, #90	@ 0x5a
 8001498:	221f      	movs	r2, #31
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	4019      	ands	r1, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	3b5a      	subs	r3, #90	@ 0x5a
 80014b4:	fa00 f203 	lsl.w	r2, r0, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 80e5 	bne.w	800169a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d91c      	bls.n	8001512 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6999      	ldr	r1, [r3, #24]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	3b1e      	subs	r3, #30
 80014ea:	2207      	movs	r2, #7
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4019      	ands	r1, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6898      	ldr	r0, [r3, #8]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	3b1e      	subs	r3, #30
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	e019      	b.n	8001546 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6959      	ldr	r1, [r3, #20]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	2207      	movs	r2, #7
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	4019      	ands	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6898      	ldr	r0, [r3, #8]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	fa00 f203 	lsl.w	r2, r0, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	3b01      	subs	r3, #1
 8001564:	2b03      	cmp	r3, #3
 8001566:	d84f      	bhi.n	8001608 <HAL_ADC_ConfigChannel+0x28c>
 8001568:	a201      	add	r2, pc, #4	@ (adr r2, 8001570 <HAL_ADC_ConfigChannel+0x1f4>)
 800156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156e:	bf00      	nop
 8001570:	08001581 	.word	0x08001581
 8001574:	080015a3 	.word	0x080015a3
 8001578:	080015c5 	.word	0x080015c5
 800157c:	080015e7 	.word	0x080015e7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001586:	4b99      	ldr	r3, [pc, #612]	@ (80017ec <HAL_ADC_ConfigChannel+0x470>)
 8001588:	4013      	ands	r3, r2
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	0691      	lsls	r1, r2, #26
 8001590:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001592:	430a      	orrs	r2, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800159e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015a0:	e07b      	b.n	800169a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015a8:	4b90      	ldr	r3, [pc, #576]	@ (80017ec <HAL_ADC_ConfigChannel+0x470>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	0691      	lsls	r1, r2, #26
 80015b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b4:	430a      	orrs	r2, r1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015c0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015c2:	e06a      	b.n	800169a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015ca:	4b88      	ldr	r3, [pc, #544]	@ (80017ec <HAL_ADC_ConfigChannel+0x470>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	0691      	lsls	r1, r2, #26
 80015d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015d6:	430a      	orrs	r2, r1
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015e2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015e4:	e059      	b.n	800169a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015ec:	4b7f      	ldr	r3, [pc, #508]	@ (80017ec <HAL_ADC_ConfigChannel+0x470>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	0691      	lsls	r1, r2, #26
 80015f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015f8:	430a      	orrs	r2, r1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001604:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001606:	e048      	b.n	800169a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	069b      	lsls	r3, r3, #26
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800162a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001632:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	069b      	lsls	r3, r3, #26
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800164e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	069b      	lsls	r3, r3, #26
 8001660:	429a      	cmp	r2, r3
 8001662:	d107      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001672:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800167a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	069b      	lsls	r3, r3, #26
 8001684:	429a      	cmp	r2, r3
 8001686:	d107      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001696:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001698:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x33e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x33e>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_ADC_ConfigChannel+0x340>
 80016ba:	2300      	movs	r3, #0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 8131 	bne.w	8001924 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d00f      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2201      	movs	r2, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43da      	mvns	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	400a      	ands	r2, r1
 80016e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80016e8:	e049      	b.n	800177e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	409a      	lsls	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d91c      	bls.n	8001746 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6999      	ldr	r1, [r3, #24]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3b1b      	subs	r3, #27
 800171e:	2207      	movs	r2, #7
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	4019      	ands	r1, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6898      	ldr	r0, [r3, #8]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	3b1b      	subs	r3, #27
 8001738:	fa00 f203 	lsl.w	r2, r0, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	619a      	str	r2, [r3, #24]
 8001744:	e01b      	b.n	800177e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6959      	ldr	r1, [r3, #20]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	2207      	movs	r2, #7
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	4019      	ands	r1, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6898      	ldr	r0, [r3, #8]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	fa00 f203 	lsl.w	r2, r0, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001786:	d004      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x416>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a18      	ldr	r2, [pc, #96]	@ (80017f0 <HAL_ADC_ConfigChannel+0x474>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x41a>
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_ADC_ConfigChannel+0x478>)
 8001794:	e000      	b.n	8001798 <HAL_ADC_ConfigChannel+0x41c>
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_ADC_ConfigChannel+0x47c>)
 8001798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d105      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d015      	beq.n	80017da <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017b2:	2b11      	cmp	r3, #17
 80017b4:	d105      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	f040 80ac 	bne.w	8001924 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 80a5 	bne.w	8001924 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e2:	d10b      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x480>
 80017e4:	4b02      	ldr	r3, [pc, #8]	@ (80017f0 <HAL_ADC_ConfigChannel+0x474>)
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e023      	b.n	8001832 <HAL_ADC_ConfigChannel+0x4b6>
 80017ea:	bf00      	nop
 80017ec:	83fff000 	.word	0x83fff000
 80017f0:	50000100 	.word	0x50000100
 80017f4:	50000300 	.word	0x50000300
 80017f8:	50000700 	.word	0x50000700
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a4e      	ldr	r2, [pc, #312]	@ (800193c <HAL_ADC_ConfigChannel+0x5c0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d103      	bne.n	800180e <HAL_ADC_ConfigChannel+0x492>
 8001806:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e011      	b.n	8001832 <HAL_ADC_ConfigChannel+0x4b6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a4b      	ldr	r2, [pc, #300]	@ (8001940 <HAL_ADC_ConfigChannel+0x5c4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_ADC_ConfigChannel+0x4a2>
 8001818:	4b4a      	ldr	r3, [pc, #296]	@ (8001944 <HAL_ADC_ConfigChannel+0x5c8>)
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e009      	b.n	8001832 <HAL_ADC_ConfigChannel+0x4b6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a48      	ldr	r2, [pc, #288]	@ (8001944 <HAL_ADC_ConfigChannel+0x5c8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d102      	bne.n	800182e <HAL_ADC_ConfigChannel+0x4b2>
 8001828:	4b45      	ldr	r3, [pc, #276]	@ (8001940 <HAL_ADC_ConfigChannel+0x5c4>)
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e001      	b.n	8001832 <HAL_ADC_ConfigChannel+0x4b6>
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d108      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x4d6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x4d6>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_ADC_ConfigChannel+0x4d8>
 8001852:	2300      	movs	r3, #0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d150      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001858:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800185a:	2b00      	cmp	r3, #0
 800185c:	d010      	beq.n	8001880 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d107      	bne.n	800187a <HAL_ADC_ConfigChannel+0x4fe>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_ADC_ConfigChannel+0x4fe>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_ADC_ConfigChannel+0x500>
 800187a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800187c:	2b00      	cmp	r3, #0
 800187e:	d13c      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b10      	cmp	r3, #16
 8001886:	d11d      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x548>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001890:	d118      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800189a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800189c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_ADC_ConfigChannel+0x5cc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a2a      	ldr	r2, [pc, #168]	@ (800194c <HAL_ADC_ConfigChannel+0x5d0>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9a      	lsrs	r2, r3, #18
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b4:	e002      	b.n	80018bc <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f9      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018c2:	e02e      	b.n	8001922 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b11      	cmp	r3, #17
 80018ca:	d10b      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x568>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018d4:	d106      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80018de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018e2:	e01e      	b.n	8001922 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b12      	cmp	r3, #18
 80018ea:	d11a      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f8:	e013      	b.n	8001922 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f043 0220 	orr.w	r2, r3, #32
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800190c:	e00a      	b.n	8001924 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f043 0220 	orr.w	r2, r3, #32
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001920:	e000      	b.n	8001924 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001922:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800192c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001930:	4618      	mov	r0, r3
 8001932:	376c      	adds	r7, #108	@ 0x6c
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	50000100 	.word	0x50000100
 8001940:	50000400 	.word	0x50000400
 8001944:	50000500 	.word	0x50000500
 8001948:	20000000 	.word	0x20000000
 800194c:	431bde83 	.word	0x431bde83

08001950 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001950:	b480      	push	{r7}
 8001952:	b099      	sub	sp, #100	@ 0x64
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001968:	d102      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800196a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	e01a      	b.n	80019a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	@ (8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d103      	bne.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800197a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e011      	b.n	80019a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a67      	ldr	r2, [pc, #412]	@ (8001b24 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d102      	bne.n	8001992 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800198c:	4b66      	ldr	r3, [pc, #408]	@ (8001b28 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	e009      	b.n	80019a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a64      	ldr	r2, [pc, #400]	@ (8001b28 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d102      	bne.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800199c:	4b61      	ldr	r3, [pc, #388]	@ (8001b24 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	e001      	b.n	80019a6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b0      	b.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e0a9      	b.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f040 808d 	bne.w	8001af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 8086 	bne.w	8001af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019ec:	d004      	beq.n	80019f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80019f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b2c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80019fa:	e000      	b.n	80019fe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80019fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001b30 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80019fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d040      	beq.n	8001a8a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a1a:	035b      	lsls	r3, r3, #13
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a22:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001a44:	2300      	movs	r3, #0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d15c      	bne.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a66:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d14b      	bne.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001a74:	f023 030f 	bic.w	r3, r3, #15
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6811      	ldr	r1, [r2, #0]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	6892      	ldr	r2, [r2, #8]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a86:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a88:	e03c      	b.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a94:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d123      	bne.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d107      	bne.n	8001ad8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001ad8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d112      	bne.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ae6:	f023 030f 	bic.w	r3, r3, #15
 8001aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001aec:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aee:	e009      	b.n	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f043 0220 	orr.w	r2, r3, #32
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001b02:	e000      	b.n	8001b06 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b04:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001b12:	4618      	mov	r0, r3
 8001b14:	3764      	adds	r7, #100	@ 0x64
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	50000100 	.word	0x50000100
 8001b24:	50000400 	.word	0x50000400
 8001b28:	50000500 	.word	0x50000500
 8001b2c:	50000300 	.word	0x50000300
 8001b30:	50000700 	.word	0x50000700

08001b34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <ADC_Enable+0x2c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <ADC_Enable+0x2c>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <ADC_Enable+0x2e>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d143      	bne.n	8001bee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <ADC_Enable+0xc4>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f043 0210 	orr.w	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e02f      	b.n	8001bf0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ba0:	f7fe ffc0 	bl	8000b24 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ba6:	e01b      	b.n	8001be0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ba8:	f7fe ffbc 	bl	8000b24 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d914      	bls.n	8001be0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00d      	beq.n	8001be0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f043 0210 	orr.w	r2, r3, #16
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e007      	b.n	8001bf0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d1dc      	bne.n	8001ba8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	8000003f 	.word	0x8000003f

08001bfc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <ADC_Disable+0x2c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <ADC_Disable+0x2c>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <ADC_Disable+0x2e>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d047      	beq.n	8001cbe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 030d 	and.w	r3, r3, #13
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10f      	bne.n	8001c5c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0202 	orr.w	r2, r2, #2
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2203      	movs	r2, #3
 8001c52:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c54:	f7fe ff66 	bl	8000b24 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c5a:	e029      	b.n	8001cb0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e023      	b.n	8001cc0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c78:	f7fe ff54 	bl	8000b24 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d914      	bls.n	8001cb0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10d      	bne.n	8001cb0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e007      	b.n	8001cc0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d0dc      	beq.n	8001c78 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	@ (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	@ (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	@ 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7ff ff8e 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff47 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff5c 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff8e 	bl	8001d80 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5d 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffb0 	bl	8001de8 <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	e160      	b.n	8002166 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8152 	beq.w	8002160 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d005      	beq.n	8001ed4 <HAL_GPIO_Init+0x40>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d130      	bne.n	8001f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 0201 	and.w	r2, r3, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d017      	beq.n	8001f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d123      	bne.n	8001fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0203 	and.w	r2, r3, #3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80ac 	beq.w	8002160 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002008:	4b5e      	ldr	r3, [pc, #376]	@ (8002184 <HAL_GPIO_Init+0x2f0>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a5d      	ldr	r2, [pc, #372]	@ (8002184 <HAL_GPIO_Init+0x2f0>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b5b      	ldr	r3, [pc, #364]	@ (8002184 <HAL_GPIO_Init+0x2f0>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002020:	4a59      	ldr	r2, [pc, #356]	@ (8002188 <HAL_GPIO_Init+0x2f4>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800204a:	d025      	beq.n	8002098 <HAL_GPIO_Init+0x204>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a4f      	ldr	r2, [pc, #316]	@ (800218c <HAL_GPIO_Init+0x2f8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d01f      	beq.n	8002094 <HAL_GPIO_Init+0x200>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a4e      	ldr	r2, [pc, #312]	@ (8002190 <HAL_GPIO_Init+0x2fc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d019      	beq.n	8002090 <HAL_GPIO_Init+0x1fc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a4d      	ldr	r2, [pc, #308]	@ (8002194 <HAL_GPIO_Init+0x300>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_GPIO_Init+0x1f8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a4c      	ldr	r2, [pc, #304]	@ (8002198 <HAL_GPIO_Init+0x304>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00d      	beq.n	8002088 <HAL_GPIO_Init+0x1f4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a4b      	ldr	r2, [pc, #300]	@ (800219c <HAL_GPIO_Init+0x308>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <HAL_GPIO_Init+0x1f0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4a      	ldr	r2, [pc, #296]	@ (80021a0 <HAL_GPIO_Init+0x30c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_GPIO_Init+0x1ec>
 800207c:	2306      	movs	r3, #6
 800207e:	e00c      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002080:	2307      	movs	r3, #7
 8002082:	e00a      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002084:	2305      	movs	r3, #5
 8002086:	e008      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002088:	2304      	movs	r3, #4
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x206>
 800208c:	2303      	movs	r3, #3
 800208e:	e004      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_Init+0x206>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020aa:	4937      	ldr	r1, [pc, #220]	@ (8002188 <HAL_GPIO_Init+0x2f4>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b8:	4b3a      	ldr	r3, [pc, #232]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020dc:	4a31      	ldr	r2, [pc, #196]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e2:	4b30      	ldr	r3, [pc, #192]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002106:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210c:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002130:	4a1c      	ldr	r2, [pc, #112]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002136:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800215a:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <HAL_GPIO_Init+0x310>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	f47f ae97 	bne.w	8001ea4 <HAL_GPIO_Init+0x10>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	48001400 	.word	0x48001400
 80021a0:	48001800 	.word	0x48001800
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f001 b80a 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8161 	beq.w	80024a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021e4:	4bae      	ldr	r3, [pc, #696]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f0:	4bab      	ldr	r3, [pc, #684]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d157      	bne.n	80022ac <HAL_RCC_OscConfig+0x104>
 80021fc:	4ba8      	ldr	r3, [pc, #672]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002208:	d150      	bne.n	80022ac <HAL_RCC_OscConfig+0x104>
 800220a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800220e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 800221e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b3f      	cmp	r3, #63	@ 0x3f
 800222a:	d802      	bhi.n	8002232 <HAL_RCC_OscConfig+0x8a>
 800222c:	4b9c      	ldr	r3, [pc, #624]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0xb6>
 8002232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002236:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002246:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800224a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800224e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800225a:	4b91      	ldr	r3, [pc, #580]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002262:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002266:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800226a:	fa92 f2a2 	rbit	r2, r2
 800226e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002272:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002276:	fab2 f282 	clz	r2, r2
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	f042 0220 	orr.w	r2, r2, #32
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	f002 021f 	and.w	r2, r2, #31
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f202 	lsl.w	r2, r1, r2
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8108 	beq.w	80024a4 <HAL_RCC_OscConfig+0x2fc>
 8002294:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002298:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 80ff 	bne.w	80024a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f000 bf9b 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x124>
 80022be:	4b78      	ldr	r3, [pc, #480]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a77      	ldr	r2, [pc, #476]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e036      	b.n	800233a <HAL_RCC_OscConfig+0x192>
 80022cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10c      	bne.n	80022f6 <HAL_RCC_OscConfig+0x14e>
 80022dc:	4b70      	ldr	r3, [pc, #448]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6f      	ldr	r2, [pc, #444]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b6d      	ldr	r3, [pc, #436]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6c      	ldr	r2, [pc, #432]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	e021      	b.n	800233a <HAL_RCC_OscConfig+0x192>
 80022f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x17a>
 8002308:	4b65      	ldr	r3, [pc, #404]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a64      	ldr	r2, [pc, #400]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 800230e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b62      	ldr	r3, [pc, #392]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a61      	ldr	r2, [pc, #388]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x192>
 8002322:	4b5f      	ldr	r3, [pc, #380]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5e      	ldr	r2, [pc, #376]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 8002328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b5c      	ldr	r3, [pc, #368]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5b      	ldr	r2, [pc, #364]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 8002334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002338:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d054      	beq.n	80023f4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fbeb 	bl	8000b24 <HAL_GetTick>
 800234e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7fe fbe6 	bl	8000b24 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	@ 0x64
 8002362:	d902      	bls.n	800236a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	f000 bf3c 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
 800236a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800236e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800237e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b3f      	cmp	r3, #63	@ 0x3f
 800238a:	d802      	bhi.n	8002392 <HAL_RCC_OscConfig+0x1ea>
 800238c:	4b44      	ldr	r3, [pc, #272]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x216>
 8002392:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002396:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80023a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023aa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80023ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80023ba:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023c2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80023c6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80023d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0220 	orr.w	r2, r2, #32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0b0      	beq.n	8002354 <HAL_RCC_OscConfig+0x1ac>
 80023f2:	e058      	b.n	80024a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fb96 	bl	8000b24 <HAL_GetTick>
 80023f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fe:	f7fe fb91 	bl	8000b24 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	@ 0x64
 800240c:	d902      	bls.n	8002414 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	f000 bee7 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002414:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002418:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002428:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b3f      	cmp	r3, #63	@ 0x3f
 8002434:	d802      	bhi.n	800243c <HAL_RCC_OscConfig+0x294>
 8002436:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	e015      	b.n	8002468 <HAL_RCC_OscConfig+0x2c0>
 800243c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002440:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002450:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002454:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002458:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002464:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <HAL_RCC_OscConfig+0x2f8>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800246c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002470:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800247c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f002 021f 	and.w	r2, r2, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1b0      	bne.n	80023fe <HAL_RCC_OscConfig+0x256>
 800249c:	e003      	b.n	80024a6 <HAL_RCC_OscConfig+0x2fe>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 816d 	beq.w	8002796 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024bc:	4bcd      	ldr	r3, [pc, #820]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024c8:	4bca      	ldr	r3, [pc, #808]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d16e      	bne.n	80025b2 <HAL_RCC_OscConfig+0x40a>
 80024d4:	4bc7      	ldr	r3, [pc, #796]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80024dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024e0:	d167      	bne.n	80025b2 <HAL_RCC_OscConfig+0x40a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80024f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002500:	d802      	bhi.n	8002508 <HAL_RCC_OscConfig+0x360>
 8002502:	4bbc      	ldr	r3, [pc, #752]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x388>
 8002508:	2302      	movs	r3, #2
 800250a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002520:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800252c:	4bb1      	ldr	r3, [pc, #708]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	2202      	movs	r2, #2
 8002532:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002536:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800253a:	fa92 f2a2 	rbit	r2, r2
 800253e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002542:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f042 0220 	orr.w	r2, r2, #32
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f002 021f 	and.w	r2, r2, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f202 	lsl.w	r2, r1, r2
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCC_OscConfig+0x3d0>
 8002562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002566:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d002      	beq.n	8002578 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f000 be35 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b9e      	ldr	r3, [pc, #632]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	21f8      	movs	r1, #248	@ 0xf8
 800258e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002596:	fa91 f1a1 	rbit	r1, r1
 800259a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800259e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80025a2:	fab1 f181 	clz	r1, r1
 80025a6:	b2c9      	uxtb	r1, r1
 80025a8:	408b      	lsls	r3, r1
 80025aa:	4992      	ldr	r1, [pc, #584]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b0:	e0f1      	b.n	8002796 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8083 	beq.w	80026ca <HAL_RCC_OscConfig+0x522>
 80025c4:	2301      	movs	r3, #1
 80025c6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80025d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	461a      	mov	r2, r3
 80025ec:	2301      	movs	r3, #1
 80025ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fa98 	bl	8000b24 <HAL_GetTick>
 80025f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fa93 	bl	8000b24 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d902      	bls.n	8002610 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	f000 bde9 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002610:	2302      	movs	r3, #2
 8002612:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002622:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b3f      	cmp	r3, #63	@ 0x3f
 800262e:	d802      	bhi.n	8002636 <HAL_RCC_OscConfig+0x48e>
 8002630:	4b70      	ldr	r3, [pc, #448]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e013      	b.n	800265e <HAL_RCC_OscConfig+0x4b6>
 8002636:	2302      	movs	r3, #2
 8002638:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002648:	2302      	movs	r3, #2
 800264a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800264e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800265a:	4b66      	ldr	r3, [pc, #408]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	2202      	movs	r2, #2
 8002660:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002664:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002668:	fa92 f2a2 	rbit	r2, r2
 800266c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002670:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002674:	fab2 f282 	clz	r2, r2
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	f042 0220 	orr.w	r2, r2, #32
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f002 021f 	and.w	r2, r2, #31
 8002684:	2101      	movs	r1, #1
 8002686:	fa01 f202 	lsl.w	r2, r1, r2
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0b4      	beq.n	80025fa <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b58      	ldr	r3, [pc, #352]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	21f8      	movs	r1, #248	@ 0xf8
 80026a6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80026ae:	fa91 f1a1 	rbit	r1, r1
 80026b2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80026b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80026ba:	fab1 f181 	clz	r1, r1
 80026be:	b2c9      	uxtb	r1, r1
 80026c0:	408b      	lsls	r3, r1
 80026c2:	494c      	ldr	r1, [pc, #304]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
 80026c8:	e065      	b.n	8002796 <HAL_RCC_OscConfig+0x5ee>
 80026ca:	2301      	movs	r3, #1
 80026cc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80026dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026ea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	461a      	mov	r2, r3
 80026f2:	2300      	movs	r3, #0
 80026f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fa15 	bl	8000b24 <HAL_GetTick>
 80026fa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002700:	f7fe fa10 	bl	8000b24 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d902      	bls.n	8002716 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	f000 bd66 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002716:	2302      	movs	r3, #2
 8002718:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002728:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b3f      	cmp	r3, #63	@ 0x3f
 8002734:	d802      	bhi.n	800273c <HAL_RCC_OscConfig+0x594>
 8002736:	4b2f      	ldr	r3, [pc, #188]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e013      	b.n	8002764 <HAL_RCC_OscConfig+0x5bc>
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002754:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002760:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x64c>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	2202      	movs	r2, #2
 8002766:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800276a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002776:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800277a:	fab2 f282 	clz	r2, r2
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	f042 0220 	orr.w	r2, r2, #32
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f002 021f 	and.w	r2, r2, #31
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1b4      	bne.n	8002700 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8119 	beq.w	80029de <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8082 	beq.w	80028c2 <HAL_RCC_OscConfig+0x71a>
 80027be:	2301      	movs	r3, #1
 80027c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80027d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x650>)
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	461a      	mov	r2, r3
 80027e4:	2301      	movs	r3, #1
 80027e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe f99c 	bl	8000b24 <HAL_GetTick>
 80027ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	e00f      	b.n	8002812 <HAL_RCC_OscConfig+0x66a>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe f992 	bl	8000b24 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d902      	bls.n	8002812 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	f000 bce8 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002824:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002832:	2202      	movs	r2, #2
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800283a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	fa93 f2a3 	rbit	r2, r3
 8002844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002852:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002856:	2202      	movs	r2, #2
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800285e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002870:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	4bb0      	ldr	r3, [pc, #704]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800287e:	2102      	movs	r1, #2
 8002880:	6019      	str	r1, [r3, #0]
 8002882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002886:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f1a3 	rbit	r1, r3
 8002890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002894:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002898:	6019      	str	r1, [r3, #0]
  return result;
 800289a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800289e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d09d      	beq.n	80027fc <HAL_RCC_OscConfig+0x654>
 80028c0:	e08d      	b.n	80029de <HAL_RCC_OscConfig+0x836>
 80028c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f2a3 	rbit	r2, r3
 80028dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028e4:	601a      	str	r2, [r3, #0]
  return result;
 80028e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b38 <HAL_RCC_OscConfig+0x990>)
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	461a      	mov	r2, r3
 8002900:	2300      	movs	r3, #0
 8002902:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe f90e 	bl	8000b24 <HAL_GetTick>
 8002908:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290e:	f7fe f909 	bl	8000b24 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	f000 bc5f 	b.w	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002928:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800292c:	2202      	movs	r2, #2
 800292e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002934:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002942:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002950:	2202      	movs	r2, #2
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002958:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002966:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002970:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002974:	2202      	movs	r2, #2
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	fa93 f2a3 	rbit	r2, r3
 8002986:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800298a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800298e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	4b68      	ldr	r3, [pc, #416]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002992:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002998:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800299c:	2102      	movs	r1, #2
 800299e:	6019      	str	r1, [r3, #0]
 80029a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f1a3 	rbit	r1, r3
 80029ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029b6:	6019      	str	r1, [r3, #0]
  return result;
 80029b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d197      	bne.n	800290e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 819c 	beq.w	8002d2c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b4b      	ldr	r3, [pc, #300]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	61d3      	str	r3, [r2, #28]
 8002a12:	4b48      	ldr	r3, [pc, #288]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b41      	ldr	r3, [pc, #260]	@ (8002b3c <HAL_RCC_OscConfig+0x994>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11a      	bne.n	8002a76 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a40:	4b3e      	ldr	r3, [pc, #248]	@ (8002b3c <HAL_RCC_OscConfig+0x994>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3d      	ldr	r2, [pc, #244]	@ (8002b3c <HAL_RCC_OscConfig+0x994>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe f86a 	bl	8000b24 <HAL_GetTick>
 8002a50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e009      	b.n	8002a6a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7fe f865 	bl	8000b24 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e3bb      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b34      	ldr	r3, [pc, #208]	@ (8002b3c <HAL_RCC_OscConfig+0x994>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ef      	beq.n	8002a56 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_OscConfig+0x8ec>
 8002a86:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6213      	str	r3, [r2, #32]
 8002a92:	e035      	b.n	8002b00 <HAL_RCC_OscConfig+0x958>
 8002a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x916>
 8002aa4:	4b23      	ldr	r3, [pc, #140]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6213      	str	r3, [r2, #32]
 8002ab0:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002ab6:	f023 0304 	bic.w	r3, r3, #4
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e020      	b.n	8002b00 <HAL_RCC_OscConfig+0x958>
 8002abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x940>
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6213      	str	r3, [r2, #32]
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a15      	ldr	r2, [pc, #84]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x958>
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a11      	ldr	r2, [pc, #68]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <HAL_RCC_OscConfig+0x98c>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8085 	beq.w	8002c1c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fe f807 	bl	8000b24 <HAL_GetTick>
 8002b16:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	e011      	b.n	8002b40 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe f802 	bl	8000b24 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d907      	bls.n	8002b40 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e356      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002b34:	40021000 	.word	0x40021000
 8002b38:	10908120 	.word	0x10908120
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b44:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b48:	2202      	movs	r2, #2
 8002b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b50:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	fa93 f2a3 	rbit	r2, r3
 8002b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b74:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b82:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xa00>
 8002ba2:	4b98      	ldr	r3, [pc, #608]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	e013      	b.n	8002bd0 <HAL_RCC_OscConfig+0xa28>
 8002ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bac:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bd4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bd8:	2102      	movs	r1, #2
 8002bda:	6011      	str	r1, [r2, #0]
 8002bdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002be0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	fa92 f1a2 	rbit	r1, r2
 8002bea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bee:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002bf2:	6011      	str	r1, [r2, #0]
  return result;
 8002bf4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002bf8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f002 021f 	and.w	r2, r2, #31
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d080      	beq.n	8002b1c <HAL_RCC_OscConfig+0x974>
 8002c1a:	e07d      	b.n	8002d18 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1c:	f7fd ff82 	bl	8000b24 <HAL_GetTick>
 8002c20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c24:	e00b      	b.n	8002c3e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fd ff7d 	bl	8000b24 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e2d1      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c42:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c46:	2202      	movs	r2, #2
 8002c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c80:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c84:	601a      	str	r2, [r3, #0]
  return result;
 8002c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <HAL_RCC_OscConfig+0xafe>
 8002ca0:	4b58      	ldr	r3, [pc, #352]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	e013      	b.n	8002cce <HAL_RCC_OscConfig+0xb26>
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	4b4e      	ldr	r3, [pc, #312]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cd2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	6011      	str	r1, [r2, #0]
 8002cda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cde:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	fa92 f1a2 	rbit	r1, r2
 8002ce8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cec:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002cf0:	6011      	str	r1, [r2, #0]
  return result;
 8002cf2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cf6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	fab2 f282 	clz	r2, r2
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	f002 021f 	and.w	r2, r2, #31
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d186      	bne.n	8002c26 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d18:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d20:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4a37      	ldr	r2, [pc, #220]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8251 	beq.w	80031e0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3e:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	f000 820f 	beq.w	800316a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	f040 8165 	bne.w	8003028 <HAL_RCC_OscConfig+0xe80>
 8002d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d62:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d66:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d82:	601a      	str	r2, [r3, #0]
  return result;
 8002d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d88:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fd febe 	bl	8000b24 <HAL_GetTick>
 8002da8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dac:	e009      	b.n	8002dc2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dae:	f7fd feb9 	bl	8000b24 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e20f      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002dca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa93 f2a3 	rbit	r2, r3
 8002dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002de6:	601a      	str	r2, [r3, #0]
  return result;
 8002de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002df0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dfa:	d805      	bhi.n	8002e08 <HAL_RCC_OscConfig+0xc60>
 8002dfc:	4b01      	ldr	r3, [pc, #4]	@ (8002e04 <HAL_RCC_OscConfig+0xc5c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e02a      	b.n	8002e58 <HAL_RCC_OscConfig+0xcb0>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e28:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e32:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e4e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	4bca      	ldr	r3, [pc, #808]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e5c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e64:	6011      	str	r1, [r2, #0]
 8002e66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	fa92 f1a2 	rbit	r1, r2
 8002e74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e78:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002e7c:	6011      	str	r1, [r2, #0]
  return result;
 8002e7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e82:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	f042 0220 	orr.w	r2, r2, #32
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f002 021f 	and.w	r2, r2, #31
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d184      	bne.n	8002dae <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea4:	4bb6      	ldr	r3, [pc, #728]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	f023 020f 	bic.w	r2, r3, #15
 8002eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	49b1      	ldr	r1, [pc, #708]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002ebe:	4bb0      	ldr	r3, [pc, #704]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a19      	ldr	r1, [r3, #32]
 8002ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	49a7      	ldr	r1, [pc, #668]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	604b      	str	r3, [r1, #4]
 8002ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002eee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f06:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f0a:	601a      	str	r2, [r3, #0]
  return result;
 8002f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f10:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f14:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	461a      	mov	r2, r3
 8002f28:	2301      	movs	r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd fdfa 	bl	8000b24 <HAL_GetTick>
 8002f30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fd fdf5 	bl	8000b24 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e14b      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
 8002f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f5c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f6e:	601a      	str	r2, [r3, #0]
  return result;
 8002f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f74:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f82:	d802      	bhi.n	8002f8a <HAL_RCC_OscConfig+0xde2>
 8002f84:	4b7e      	ldr	r3, [pc, #504]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e027      	b.n	8002fda <HAL_RCC_OscConfig+0xe32>
 8002f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f8e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002faa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fb4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	fa93 f2a3 	rbit	r2, r3
 8002fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fd0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fde:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fe2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fe6:	6011      	str	r1, [r2, #0]
 8002fe8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fec:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	fa92 f1a2 	rbit	r1, r2
 8002ff6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ffa:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ffe:	6011      	str	r1, [r2, #0]
  return result;
 8003000:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003004:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	fab2 f282 	clz	r2, r2
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	f042 0220 	orr.w	r2, r2, #32
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f002 021f 	and.w	r2, r2, #31
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d087      	beq.n	8002f36 <HAL_RCC_OscConfig+0xd8e>
 8003026:	e0db      	b.n	80031e0 <HAL_RCC_OscConfig+0x1038>
 8003028:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800302c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003030:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800303a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003048:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800304c:	601a      	str	r2, [r3, #0]
  return result;
 800304e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003052:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003056:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003062:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	461a      	mov	r2, r3
 800306a:	2300      	movs	r3, #0
 800306c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fd fd59 	bl	8000b24 <HAL_GetTick>
 8003072:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003076:	e009      	b.n	800308c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fd fd54 	bl	8000b24 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0aa      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
 800308c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003090:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003094:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800309e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030b0:	601a      	str	r2, [r3, #0]
  return result;
 80030b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80030ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80030c4:	d802      	bhi.n	80030cc <HAL_RCC_OscConfig+0xf24>
 80030c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	e027      	b.n	800311c <HAL_RCC_OscConfig+0xf74>
 80030cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030de:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fa93 f2a3 	rbit	r2, r3
 80030e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003112:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_OscConfig+0xfd8>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003120:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003124:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003128:	6011      	str	r1, [r2, #0]
 800312a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800312e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003132:	6812      	ldr	r2, [r2, #0]
 8003134:	fa92 f1a2 	rbit	r1, r2
 8003138:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800313c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003140:	6011      	str	r1, [r2, #0]
  return result;
 8003142:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003146:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	fab2 f282 	clz	r2, r2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f002 021f 	and.w	r2, r2, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d187      	bne.n	8003078 <HAL_RCC_OscConfig+0xed0>
 8003168:	e03a      	b.n	80031e0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800316e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d104      	bne.n	8003184 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e031      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003184:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <HAL_RCC_OscConfig+0x1044>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <HAL_RCC_OscConfig+0x1044>)
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003194:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003198:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800319c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d117      	bne.n	80031dc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80031b0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80031b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10b      	bne.n	80031dc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80031c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b09e      	sub	sp, #120	@ 0x78
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e154      	b.n	80034b2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b89      	ldr	r3, [pc, #548]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d910      	bls.n	8003238 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b86      	ldr	r3, [pc, #536]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 0207 	bic.w	r2, r3, #7
 800321e:	4984      	ldr	r1, [pc, #528]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b82      	ldr	r3, [pc, #520]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e13c      	b.n	80034b2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b7b      	ldr	r3, [pc, #492]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4978      	ldr	r1, [pc, #480]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80cd 	beq.w	80033fe <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d137      	bne.n	80032dc <HAL_RCC_ClockConfig+0xec>
 800326c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003270:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800327a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b3f      	cmp	r3, #63	@ 0x3f
 8003284:	d802      	bhi.n	800328c <HAL_RCC_ClockConfig+0x9c>
 8003286:	4b6b      	ldr	r3, [pc, #428]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	e00f      	b.n	80032ac <HAL_RCC_ClockConfig+0xbc>
 800328c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003290:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	667b      	str	r3, [r7, #100]	@ 0x64
 800329a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800329e:	663b      	str	r3, [r7, #96]	@ 0x60
 80032a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032a8:	4b62      	ldr	r3, [pc, #392]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032b4:	fa92 f2a2 	rbit	r2, r2
 80032b8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032bc:	fab2 f282 	clz	r2, r2
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	f042 0220 	orr.w	r2, r2, #32
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f002 021f 	and.w	r2, r2, #31
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d171      	bne.n	80033bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0ea      	b.n	80034b2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d137      	bne.n	8003354 <HAL_RCC_ClockConfig+0x164>
 80032e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80032fc:	d802      	bhi.n	8003304 <HAL_RCC_ClockConfig+0x114>
 80032fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	e00f      	b.n	8003324 <HAL_RCC_ClockConfig+0x134>
 8003304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003308:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	647b      	str	r3, [r7, #68]	@ 0x44
 8003312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003316:	643b      	str	r3, [r7, #64]	@ 0x40
 8003318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003320:	4b44      	ldr	r3, [pc, #272]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003328:	63ba      	str	r2, [r7, #56]	@ 0x38
 800332a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800332c:	fa92 f2a2 	rbit	r2, r2
 8003330:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003334:	fab2 f282 	clz	r2, r2
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f042 0220 	orr.w	r2, r2, #32
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f002 021f 	and.w	r2, r2, #31
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f202 	lsl.w	r2, r1, r2
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d135      	bne.n	80033bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0ae      	b.n	80034b2 <HAL_RCC_ClockConfig+0x2c2>
 8003354:	2302      	movs	r3, #2
 8003356:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b3f      	cmp	r3, #63	@ 0x3f
 800336a:	d802      	bhi.n	8003372 <HAL_RCC_ClockConfig+0x182>
 800336c:	4b31      	ldr	r3, [pc, #196]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	e00d      	b.n	800338e <HAL_RCC_ClockConfig+0x19e>
 8003372:	2302      	movs	r3, #2
 8003374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
 800337e:	2302      	movs	r3, #2
 8003380:	623b      	str	r3, [r7, #32]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	2202      	movs	r2, #2
 8003390:	61ba      	str	r2, [r7, #24]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	fa92 f2a2 	rbit	r2, r2
 8003398:	617a      	str	r2, [r7, #20]
  return result;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f042 0220 	orr.w	r2, r2, #32
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	f002 021f 	and.w	r2, r2, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e07a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f023 0203 	bic.w	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	491a      	ldr	r1, [pc, #104]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ce:	f7fd fba9 	bl	8000b24 <HAL_GetTick>
 80033d2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d6:	f7fd fba5 	bl	8000b24 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e062      	b.n	80034b2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ec:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 020c 	and.w	r2, r3, #12
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d1eb      	bne.n	80033d6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d215      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340c:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 0207 	bic.w	r2, r3, #7
 8003414:	4906      	ldr	r1, [pc, #24]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <HAL_RCC_ClockConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d006      	beq.n	8003438 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e041      	b.n	80034b2 <HAL_RCC_ClockConfig+0x2c2>
 800342e:	bf00      	nop
 8003430:	40022000 	.word	0x40022000
 8003434:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_RCC_ClockConfig+0x2cc>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	491a      	ldr	r1, [pc, #104]	@ (80034bc <HAL_RCC_ClockConfig+0x2cc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003462:	4b16      	ldr	r3, [pc, #88]	@ (80034bc <HAL_RCC_ClockConfig+0x2cc>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4912      	ldr	r1, [pc, #72]	@ (80034bc <HAL_RCC_ClockConfig+0x2cc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003476:	f000 f829 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 800347a:	4601      	mov	r1, r0
 800347c:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <HAL_RCC_ClockConfig+0x2cc>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003484:	22f0      	movs	r2, #240	@ 0xf0
 8003486:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	60fa      	str	r2, [r7, #12]
  return result;
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	40d3      	lsrs	r3, r2
 800349a:	4a09      	ldr	r2, [pc, #36]	@ (80034c0 <HAL_RCC_ClockConfig+0x2d0>)
 800349c:	5cd3      	ldrb	r3, [r2, r3]
 800349e:	fa21 f303 	lsr.w	r3, r1, r3
 80034a2:	4a08      	ldr	r2, [pc, #32]	@ (80034c4 <HAL_RCC_ClockConfig+0x2d4>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034a6:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <HAL_RCC_ClockConfig+0x2d8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd faf6 	bl	8000a9c <HAL_InitTick>
  
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3778      	adds	r7, #120	@ 0x78
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08005e08 	.word	0x08005e08
 80034c4:	20000000 	.word	0x20000000
 80034c8:	20000004 	.word	0x20000004

080034cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80034e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x98>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x30>
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0x36>
 80034fa:	e029      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034fe:	613b      	str	r3, [r7, #16]
      break;
 8003500:	e029      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	0c9b      	lsrs	r3, r3, #18
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	4a18      	ldr	r2, [pc, #96]	@ (800356c <HAL_RCC_GetSysClockFreq+0xa0>)
 800350c:	5cd3      	ldrb	r3, [r2, r3]
 800350e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003510:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x98>)
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <HAL_RCC_GetSysClockFreq+0xa4>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003528:	4a0f      	ldr	r2, [pc, #60]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x9c>)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e007      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800353a:	4a0b      	ldr	r2, [pc, #44]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x9c>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	613b      	str	r3, [r7, #16]
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003552:	613b      	str	r3, [r7, #16]
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	693b      	ldr	r3, [r7, #16]
}
 8003558:	4618      	mov	r0, r3
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40021000 	.word	0x40021000
 8003568:	007a1200 	.word	0x007a1200
 800356c:	08005e20 	.word	0x08005e20
 8003570:	08005e30 	.word	0x08005e30

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003578:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_RCC_GetHCLKFreq+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000000 	.word	0x20000000

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003592:	f7ff ffef 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003596:	4601      	mov	r1, r0
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035a0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80035a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	fa92 f2a2 	rbit	r2, r2
 80035ac:	603a      	str	r2, [r7, #0]
  return result;
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	40d3      	lsrs	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	@ (80035cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08005e18 	.word	0x08005e18

080035d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80035d6:	f7ff ffcd 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035da:	4601      	mov	r1, r0
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80035e4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80035e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	fa92 f2a2 	rbit	r2, r2
 80035f0:	603a      	str	r2, [r7, #0]
  return result;
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	40d3      	lsrs	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	08005e18 	.word	0x08005e18

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b092      	sub	sp, #72	@ 0x48
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80d2 	beq.w	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003638:	4b4d      	ldr	r3, [pc, #308]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10e      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003644:	4b4a      	ldr	r3, [pc, #296]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	4a49      	ldr	r2, [pc, #292]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800364a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364e:	61d3      	str	r3, [r2, #28]
 8003650:	4b47      	ldr	r3, [pc, #284]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b44      	ldr	r3, [pc, #272]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a40      	ldr	r2, [pc, #256]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003678:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fd fa53 	bl	8000b24 <HAL_GetTick>
 800367e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fd fa4f 	bl	8000b24 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b64      	cmp	r3, #100	@ 0x64
 800368e:	d901      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e1d4      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b37      	ldr	r3, [pc, #220]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a0:	4b33      	ldr	r3, [pc, #204]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8082 	beq.w	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d07a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	461a      	mov	r2, r3
 80036ea:	2301      	movs	r3, #1
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80036fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	461a      	mov	r2, r3
 800370e:	2300      	movs	r3, #0
 8003710:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003712:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003716:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d049      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fd f9ff 	bl	8000b24 <HAL_GetTick>
 8003726:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd f9fb 	bl	8000b24 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e17e      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003740:	2302      	movs	r3, #2
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
 800374c:	2302      	movs	r3, #2
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
  return result;
 8003758:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d108      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800376a:	4b01      	ldr	r3, [pc, #4]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	e00d      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	10908100 	.word	0x10908100
 800377c:	2302      	movs	r3, #2
 800377e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	4b9a      	ldr	r3, [pc, #616]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	2202      	movs	r2, #2
 800378e:	613a      	str	r2, [r7, #16]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	fa92 f2a2 	rbit	r2, r2
 8003796:	60fa      	str	r2, [r7, #12]
  return result;
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	fab2 f282 	clz	r2, r2
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	f002 021f 	and.w	r2, r2, #31
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0b9      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037b6:	4b8f      	ldr	r3, [pc, #572]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	498c      	ldr	r1, [pc, #560]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b88      	ldr	r3, [pc, #544]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	4a87      	ldr	r2, [pc, #540]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e8:	4b82      	ldr	r3, [pc, #520]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	f023 0203 	bic.w	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	497f      	ldr	r1, [pc, #508]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003806:	4b7b      	ldr	r3, [pc, #492]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4978      	ldr	r1, [pc, #480]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003824:	4b73      	ldr	r3, [pc, #460]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	4970      	ldr	r1, [pc, #448]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003832:	4313      	orrs	r3, r2
 8003834:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003842:	4b6c      	ldr	r3, [pc, #432]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	f023 0210 	bic.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	4969      	ldr	r1, [pc, #420]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003860:	4b64      	ldr	r3, [pc, #400]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386c:	4961      	ldr	r1, [pc, #388]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800387e:	4b5d      	ldr	r3, [pc, #372]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	f023 0220 	bic.w	r2, r3, #32
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	495a      	ldr	r1, [pc, #360]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800389c:	4b55      	ldr	r3, [pc, #340]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	4952      	ldr	r1, [pc, #328]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ba:	4b4e      	ldr	r3, [pc, #312]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	494b      	ldr	r1, [pc, #300]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038d8:	4b46      	ldr	r3, [pc, #280]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	4943      	ldr	r1, [pc, #268]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038f6:	4b3f      	ldr	r3, [pc, #252]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	493c      	ldr	r1, [pc, #240]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003914:	4b37      	ldr	r3, [pc, #220]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	4934      	ldr	r1, [pc, #208]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	4313      	orrs	r3, r2
 8003924:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003932:	4b30      	ldr	r3, [pc, #192]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	492d      	ldr	r1, [pc, #180]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003950:	4b28      	ldr	r3, [pc, #160]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395c:	4925      	ldr	r1, [pc, #148]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800396e:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	491e      	ldr	r1, [pc, #120]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	4916      	ldr	r1, [pc, #88]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399a:	4313      	orrs	r3, r2
 800399c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80039aa:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	490f      	ldr	r1, [pc, #60]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039c8:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	4907      	ldr	r1, [pc, #28]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039e6:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	e002      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fa:	4913      	ldr	r1, [pc, #76]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a18:	490b      	ldr	r1, [pc, #44]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d008      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a36:	4904      	ldr	r1, [pc, #16]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3748      	adds	r7, #72	@ 0x48
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000

08003a4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e073      	b.n	8003b4a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7f5b      	ldrb	r3, [r3, #29]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fc fe9a 	bl	80007ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	d055      	beq.n	8003b38 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	22ca      	movs	r2, #202	@ 0xca
 8003a92:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2253      	movs	r2, #83	@ 0x53
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f87f 	bl	8003ba0 <RTC_EnterInitMode>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d12c      	bne.n	8003b06 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003abe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6899      	ldr	r1, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68d2      	ldr	r2, [r2, #12]
 8003ae6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6919      	ldr	r1, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	041a      	lsls	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f886 	bl	8003c0e <RTC_ExitInitMode>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d110      	bne.n	8003b2e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	22ff      	movs	r2, #255	@ 0xff
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b36:	e001      	b.n	8003b3c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0d      	ldr	r2, [pc, #52]	@ (8003b9c <HAL_RTC_WaitForSynchro+0x48>)
 8003b66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b68:	f7fc ffdc 	bl	8000b24 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b6e:	e009      	b.n	8003b84 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b70:	f7fc ffd8 	bl	8000b24 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b7e:	d901      	bls.n	8003b84 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e007      	b.n	8003b94 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0ee      	beq.n	8003b70 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	0001ff5f 	.word	0x0001ff5f

08003ba0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d122      	bne.n	8003c04 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bce:	f7fc ffa9 	bl	8000b24 <HAL_GetTick>
 8003bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bd4:	e00c      	b.n	8003bf0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bd6:	f7fc ffa5 	bl	8000b24 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003be4:	d904      	bls.n	8003bf0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <RTC_EnterInitMode+0x64>
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d1e8      	bne.n	8003bd6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c28:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ff8b 	bl	8003b54 <HAL_RTC_WaitForSynchro>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2204      	movs	r2, #4
 8003c48:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e049      	b.n	8003cfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fc fdba 	bl	80007f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	4610      	mov	r0, r2
 8003c98:	f000 fa56 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_TIM_PWM_Start+0x24>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e03c      	b.n	8003da6 <HAL_TIM_PWM_Start+0x9e>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d109      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x3e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e02f      	b.n	8003da6 <HAL_TIM_PWM_Start+0x9e>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d109      	bne.n	8003d60 <HAL_TIM_PWM_Start+0x58>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e022      	b.n	8003da6 <HAL_TIM_PWM_Start+0x9e>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d109      	bne.n	8003d7a <HAL_TIM_PWM_Start+0x72>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e015      	b.n	8003da6 <HAL_TIM_PWM_Start+0x9e>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d109      	bne.n	8003d94 <HAL_TIM_PWM_Start+0x8c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	bf14      	ite	ne
 8003d8c:	2301      	movne	r3, #1
 8003d8e:	2300      	moveq	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e008      	b.n	8003da6 <HAL_TIM_PWM_Start+0x9e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0a1      	b.n	8003ef2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_TIM_PWM_Start+0xb6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dbc:	e023      	b.n	8003e06 <HAL_TIM_PWM_Start+0xfe>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d104      	bne.n	8003dce <HAL_TIM_PWM_Start+0xc6>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dcc:	e01b      	b.n	8003e06 <HAL_TIM_PWM_Start+0xfe>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_PWM_Start+0xd6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ddc:	e013      	b.n	8003e06 <HAL_TIM_PWM_Start+0xfe>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d104      	bne.n	8003dee <HAL_TIM_PWM_Start+0xe6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003dec:	e00b      	b.n	8003e06 <HAL_TIM_PWM_Start+0xfe>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d104      	bne.n	8003dfe <HAL_TIM_PWM_Start+0xf6>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dfc:	e003      	b.n	8003e06 <HAL_TIM_PWM_Start+0xfe>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	6839      	ldr	r1, [r7, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fd4a 	bl	80048a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a38      	ldr	r2, [pc, #224]	@ (8003efc <HAL_TIM_PWM_Start+0x1f4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_TIM_PWM_Start+0x148>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a37      	ldr	r2, [pc, #220]	@ (8003f00 <HAL_TIM_PWM_Start+0x1f8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_TIM_PWM_Start+0x148>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a35      	ldr	r2, [pc, #212]	@ (8003f04 <HAL_TIM_PWM_Start+0x1fc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_TIM_PWM_Start+0x148>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a34      	ldr	r2, [pc, #208]	@ (8003f08 <HAL_TIM_PWM_Start+0x200>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_TIM_PWM_Start+0x148>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a32      	ldr	r2, [pc, #200]	@ (8003f0c <HAL_TIM_PWM_Start+0x204>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_TIM_PWM_Start+0x148>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a31      	ldr	r2, [pc, #196]	@ (8003f10 <HAL_TIM_PWM_Start+0x208>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIM_PWM_Start+0x14c>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_TIM_PWM_Start+0x14e>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a23      	ldr	r2, [pc, #140]	@ (8003efc <HAL_TIM_PWM_Start+0x1f4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d01d      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x1a8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7c:	d018      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x1a8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a24      	ldr	r2, [pc, #144]	@ (8003f14 <HAL_TIM_PWM_Start+0x20c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x1a8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a22      	ldr	r2, [pc, #136]	@ (8003f18 <HAL_TIM_PWM_Start+0x210>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00e      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x1a8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <HAL_TIM_PWM_Start+0x1f8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x1a8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <HAL_TIM_PWM_Start+0x1fc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d004      	beq.n	8003eb0 <HAL_TIM_PWM_Start+0x1a8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a19      	ldr	r2, [pc, #100]	@ (8003f10 <HAL_TIM_PWM_Start+0x208>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d115      	bne.n	8003edc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_TIM_PWM_Start+0x214>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d015      	beq.n	8003eee <HAL_TIM_PWM_Start+0x1e6>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec8:	d011      	beq.n	8003eee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	e008      	b.n	8003eee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e000      	b.n	8003ef0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40013400 	.word	0x40013400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800
 8003f10:	40015000 	.word	0x40015000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	00010007 	.word	0x00010007

08003f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e0ff      	b.n	800413e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b14      	cmp	r3, #20
 8003f4a:	f200 80f0 	bhi.w	800412e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	0800412f 	.word	0x0800412f
 8003f5c:	0800412f 	.word	0x0800412f
 8003f60:	0800412f 	.word	0x0800412f
 8003f64:	08003fe9 	.word	0x08003fe9
 8003f68:	0800412f 	.word	0x0800412f
 8003f6c:	0800412f 	.word	0x0800412f
 8003f70:	0800412f 	.word	0x0800412f
 8003f74:	0800402b 	.word	0x0800402b
 8003f78:	0800412f 	.word	0x0800412f
 8003f7c:	0800412f 	.word	0x0800412f
 8003f80:	0800412f 	.word	0x0800412f
 8003f84:	0800406b 	.word	0x0800406b
 8003f88:	0800412f 	.word	0x0800412f
 8003f8c:	0800412f 	.word	0x0800412f
 8003f90:	0800412f 	.word	0x0800412f
 8003f94:	080040ad 	.word	0x080040ad
 8003f98:	0800412f 	.word	0x0800412f
 8003f9c:	0800412f 	.word	0x0800412f
 8003fa0:	0800412f 	.word	0x0800412f
 8003fa4:	080040ed 	.word	0x080040ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f974 	bl	800429c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0208 	orr.w	r2, r2, #8
 8003fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0204 	bic.w	r2, r2, #4
 8003fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6999      	ldr	r1, [r3, #24]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	619a      	str	r2, [r3, #24]
      break;
 8003fe6:	e0a5      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f9ee 	bl	80043d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6999      	ldr	r1, [r3, #24]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	021a      	lsls	r2, r3, #8
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	619a      	str	r2, [r3, #24]
      break;
 8004028:	e084      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fa61 	bl	80044f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0208 	orr.w	r2, r2, #8
 8004044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0204 	bic.w	r2, r2, #4
 8004054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69d9      	ldr	r1, [r3, #28]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	61da      	str	r2, [r3, #28]
      break;
 8004068:	e064      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fad3 	bl	800461c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69d9      	ldr	r1, [r3, #28]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	021a      	lsls	r2, r3, #8
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	61da      	str	r2, [r3, #28]
      break;
 80040aa:	e043      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb22 	bl	80046fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0208 	orr.w	r2, r2, #8
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80040ea:	e023      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fb6c 	bl	80047d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004106:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004116:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800412c:	e002      	b.n	8004134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
      break;
 8004132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800413c:	7dfb      	ldrb	r3, [r7, #23]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop

08004148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a48      	ldr	r2, [pc, #288]	@ (800427c <TIM_Base_SetConfig+0x134>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004166:	d00f      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a45      	ldr	r2, [pc, #276]	@ (8004280 <TIM_Base_SetConfig+0x138>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00b      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a44      	ldr	r2, [pc, #272]	@ (8004284 <TIM_Base_SetConfig+0x13c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a43      	ldr	r2, [pc, #268]	@ (8004288 <TIM_Base_SetConfig+0x140>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a42      	ldr	r2, [pc, #264]	@ (800428c <TIM_Base_SetConfig+0x144>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d108      	bne.n	800419a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a37      	ldr	r2, [pc, #220]	@ (800427c <TIM_Base_SetConfig+0x134>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a8:	d01b      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a34      	ldr	r2, [pc, #208]	@ (8004280 <TIM_Base_SetConfig+0x138>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d017      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a33      	ldr	r2, [pc, #204]	@ (8004284 <TIM_Base_SetConfig+0x13c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a32      	ldr	r2, [pc, #200]	@ (8004288 <TIM_Base_SetConfig+0x140>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <TIM_Base_SetConfig+0x148>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a31      	ldr	r2, [pc, #196]	@ (8004294 <TIM_Base_SetConfig+0x14c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a30      	ldr	r2, [pc, #192]	@ (8004298 <TIM_Base_SetConfig+0x150>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_Base_SetConfig+0x9a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2b      	ldr	r2, [pc, #172]	@ (800428c <TIM_Base_SetConfig+0x144>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a18      	ldr	r2, [pc, #96]	@ (800427c <TIM_Base_SetConfig+0x134>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <TIM_Base_SetConfig+0x100>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <TIM_Base_SetConfig+0x140>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00f      	beq.n	8004248 <TIM_Base_SetConfig+0x100>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a19      	ldr	r2, [pc, #100]	@ (8004290 <TIM_Base_SetConfig+0x148>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00b      	beq.n	8004248 <TIM_Base_SetConfig+0x100>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <TIM_Base_SetConfig+0x14c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d007      	beq.n	8004248 <TIM_Base_SetConfig+0x100>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <TIM_Base_SetConfig+0x150>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x100>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a12      	ldr	r2, [pc, #72]	@ (800428c <TIM_Base_SetConfig+0x144>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d103      	bne.n	8004250 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d105      	bne.n	800426e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]
  }
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40013400 	.word	0x40013400
 800428c:	40015000 	.word	0x40015000
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800

0800429c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0201 	bic.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0302 	bic.w	r3, r3, #2
 80042e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a30      	ldr	r2, [pc, #192]	@ (80043b8 <TIM_OC1_SetConfig+0x11c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <TIM_OC1_SetConfig+0x88>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a2f      	ldr	r2, [pc, #188]	@ (80043bc <TIM_OC1_SetConfig+0x120>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00f      	beq.n	8004324 <TIM_OC1_SetConfig+0x88>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a2e      	ldr	r2, [pc, #184]	@ (80043c0 <TIM_OC1_SetConfig+0x124>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00b      	beq.n	8004324 <TIM_OC1_SetConfig+0x88>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a2d      	ldr	r2, [pc, #180]	@ (80043c4 <TIM_OC1_SetConfig+0x128>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <TIM_OC1_SetConfig+0x88>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a2c      	ldr	r2, [pc, #176]	@ (80043c8 <TIM_OC1_SetConfig+0x12c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC1_SetConfig+0x88>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a2b      	ldr	r2, [pc, #172]	@ (80043cc <TIM_OC1_SetConfig+0x130>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10c      	bne.n	800433e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f023 0308 	bic.w	r3, r3, #8
 800432a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <TIM_OC1_SetConfig+0x11c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <TIM_OC1_SetConfig+0xd2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <TIM_OC1_SetConfig+0x120>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00f      	beq.n	800436e <TIM_OC1_SetConfig+0xd2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1b      	ldr	r2, [pc, #108]	@ (80043c0 <TIM_OC1_SetConfig+0x124>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00b      	beq.n	800436e <TIM_OC1_SetConfig+0xd2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1a      	ldr	r2, [pc, #104]	@ (80043c4 <TIM_OC1_SetConfig+0x128>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d007      	beq.n	800436e <TIM_OC1_SetConfig+0xd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <TIM_OC1_SetConfig+0x12c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <TIM_OC1_SetConfig+0xd2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <TIM_OC1_SetConfig+0x130>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d111      	bne.n	8004392 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800437c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40013400 	.word	0x40013400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800
 80043cc:	40015000 	.word	0x40015000

080043d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f023 0210 	bic.w	r2, r3, #16
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0320 	bic.w	r3, r3, #32
 800441e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2c      	ldr	r2, [pc, #176]	@ (80044e0 <TIM_OC2_SetConfig+0x110>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d007      	beq.n	8004444 <TIM_OC2_SetConfig+0x74>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a2b      	ldr	r2, [pc, #172]	@ (80044e4 <TIM_OC2_SetConfig+0x114>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d003      	beq.n	8004444 <TIM_OC2_SetConfig+0x74>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a2a      	ldr	r2, [pc, #168]	@ (80044e8 <TIM_OC2_SetConfig+0x118>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10d      	bne.n	8004460 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800445e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1f      	ldr	r2, [pc, #124]	@ (80044e0 <TIM_OC2_SetConfig+0x110>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <TIM_OC2_SetConfig+0xc0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a1e      	ldr	r2, [pc, #120]	@ (80044e4 <TIM_OC2_SetConfig+0x114>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_OC2_SetConfig+0xc0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a1e      	ldr	r2, [pc, #120]	@ (80044ec <TIM_OC2_SetConfig+0x11c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00b      	beq.n	8004490 <TIM_OC2_SetConfig+0xc0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a1d      	ldr	r2, [pc, #116]	@ (80044f0 <TIM_OC2_SetConfig+0x120>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_OC2_SetConfig+0xc0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a1c      	ldr	r2, [pc, #112]	@ (80044f4 <TIM_OC2_SetConfig+0x124>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC2_SetConfig+0xc0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <TIM_OC2_SetConfig+0x118>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d113      	bne.n	80044b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004496:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800449e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40013400 	.word	0x40013400
 80044e8:	40015000 	.word	0x40015000
 80044ec:	40014000 	.word	0x40014000
 80044f0:	40014400 	.word	0x40014400
 80044f4:	40014800 	.word	0x40014800

080044f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2b      	ldr	r2, [pc, #172]	@ (8004604 <TIM_OC3_SetConfig+0x10c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_OC3_SetConfig+0x72>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2a      	ldr	r2, [pc, #168]	@ (8004608 <TIM_OC3_SetConfig+0x110>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_OC3_SetConfig+0x72>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a29      	ldr	r2, [pc, #164]	@ (800460c <TIM_OC3_SetConfig+0x114>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10d      	bne.n	8004586 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004584:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1e      	ldr	r2, [pc, #120]	@ (8004604 <TIM_OC3_SetConfig+0x10c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <TIM_OC3_SetConfig+0xbe>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <TIM_OC3_SetConfig+0x110>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00f      	beq.n	80045b6 <TIM_OC3_SetConfig+0xbe>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1d      	ldr	r2, [pc, #116]	@ (8004610 <TIM_OC3_SetConfig+0x118>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_OC3_SetConfig+0xbe>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004614 <TIM_OC3_SetConfig+0x11c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_OC3_SetConfig+0xbe>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <TIM_OC3_SetConfig+0x120>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_OC3_SetConfig+0xbe>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a16      	ldr	r2, [pc, #88]	@ (800460c <TIM_OC3_SetConfig+0x114>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d113      	bne.n	80045de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40013400 	.word	0x40013400
 800460c:	40015000 	.word	0x40015000
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800

0800461c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800466a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1a      	ldr	r2, [pc, #104]	@ (80046e4 <TIM_OC4_SetConfig+0xc8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <TIM_OC4_SetConfig+0x8c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a19      	ldr	r2, [pc, #100]	@ (80046e8 <TIM_OC4_SetConfig+0xcc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00f      	beq.n	80046a8 <TIM_OC4_SetConfig+0x8c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <TIM_OC4_SetConfig+0xd0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_OC4_SetConfig+0x8c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a17      	ldr	r2, [pc, #92]	@ (80046f0 <TIM_OC4_SetConfig+0xd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_OC4_SetConfig+0x8c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a16      	ldr	r2, [pc, #88]	@ (80046f4 <TIM_OC4_SetConfig+0xd8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_OC4_SetConfig+0x8c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	@ (80046f8 <TIM_OC4_SetConfig+0xdc>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d109      	bne.n	80046bc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40013400 	.word	0x40013400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40014400 	.word	0x40014400
 80046f4:	40014800 	.word	0x40014800
 80046f8:	40015000 	.word	0x40015000

080046fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <TIM_OC5_SetConfig+0xbc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <TIM_OC5_SetConfig+0x82>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <TIM_OC5_SetConfig+0xc0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00f      	beq.n	800477e <TIM_OC5_SetConfig+0x82>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <TIM_OC5_SetConfig+0xc4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_OC5_SetConfig+0x82>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <TIM_OC5_SetConfig+0xc8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_OC5_SetConfig+0x82>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <TIM_OC5_SetConfig+0xcc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_OC5_SetConfig+0x82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a14      	ldr	r2, [pc, #80]	@ (80047cc <TIM_OC5_SetConfig+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d109      	bne.n	8004792 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	621a      	str	r2, [r3, #32]
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40013400 	.word	0x40013400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	40015000 	.word	0x40015000

080047d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	051b      	lsls	r3, r3, #20
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a1a      	ldr	r2, [pc, #104]	@ (8004890 <TIM_OC6_SetConfig+0xc0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <TIM_OC6_SetConfig+0x84>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <TIM_OC6_SetConfig+0xc4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00f      	beq.n	8004854 <TIM_OC6_SetConfig+0x84>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a18      	ldr	r2, [pc, #96]	@ (8004898 <TIM_OC6_SetConfig+0xc8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00b      	beq.n	8004854 <TIM_OC6_SetConfig+0x84>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a17      	ldr	r2, [pc, #92]	@ (800489c <TIM_OC6_SetConfig+0xcc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d007      	beq.n	8004854 <TIM_OC6_SetConfig+0x84>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a16      	ldr	r2, [pc, #88]	@ (80048a0 <TIM_OC6_SetConfig+0xd0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d003      	beq.n	8004854 <TIM_OC6_SetConfig+0x84>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a15      	ldr	r2, [pc, #84]	@ (80048a4 <TIM_OC6_SetConfig+0xd4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d109      	bne.n	8004868 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800485a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40013400 	.word	0x40013400
 8004898:	40014000 	.word	0x40014000
 800489c:	40014400 	.word	0x40014400
 80048a0:	40014800 	.word	0x40014800
 80048a4:	40015000 	.word	0x40015000

080048a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 031f 	and.w	r3, r3, #31
 80048ba:	2201      	movs	r2, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	401a      	ands	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1a      	ldr	r2, [r3, #32]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e06d      	b.n	80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a30      	ldr	r2, [pc, #192]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2f      	ldr	r2, [pc, #188]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004950:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d018      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1a      	ldr	r2, [pc, #104]	@ (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a16      	ldr	r2, [pc, #88]	@ (8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10c      	bne.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40015000 	.word	0x40015000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40014000 	.word	0x40014000

08004a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e06a      	b.n	8004afe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d115      	bne.n	8004aec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	051b      	lsls	r3, r3, #20
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40013400 	.word	0x40013400
 8004b14:	40015000 	.word	0x40015000

08004b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e040      	b.n	8004bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fb feb4 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2224      	movs	r2, #36	@ 0x24
 8004b44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa86 	bl	8005070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f8af 	bl	8004cc8 <UART_SetConfig>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e01b      	b.n	8004bac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fb05 	bl	80051b4 <UART_CheckIdleState>
 8004baa:	4603      	mov	r3, r0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	@ 0x28
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d177      	bne.n	8004cbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Transmit+0x24>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e070      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2221      	movs	r2, #33	@ 0x21
 8004be8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bea:	f7fb ff9b 	bl	8000b24 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c08:	d108      	bne.n	8004c1c <HAL_UART_Transmit+0x68>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e003      	b.n	8004c24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c24:	e02f      	b.n	8004c86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	@ 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fb67 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e03b      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881a      	ldrh	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e007      	b.n	8004c74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1c9      	bne.n	8004c26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2140      	movs	r1, #64	@ 0x40
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fb31 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e005      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b92      	ldr	r3, [pc, #584]	@ (8004f3c <UART_SetConfig+0x274>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	6979      	ldr	r1, [r7, #20]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a80      	ldr	r2, [pc, #512]	@ (8004f40 <UART_SetConfig+0x278>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d120      	bne.n	8004d86 <UART_SetConfig+0xbe>
 8004d44:	4b7f      	ldr	r3, [pc, #508]	@ (8004f44 <UART_SetConfig+0x27c>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d817      	bhi.n	8004d80 <UART_SetConfig+0xb8>
 8004d50:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <UART_SetConfig+0x90>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d7b 	.word	0x08004d7b
 8004d64:	08004d6f 	.word	0x08004d6f
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e0b5      	b.n	8004eda <UART_SetConfig+0x212>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e0b2      	b.n	8004eda <UART_SetConfig+0x212>
 8004d74:	2304      	movs	r3, #4
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e0af      	b.n	8004eda <UART_SetConfig+0x212>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e0ac      	b.n	8004eda <UART_SetConfig+0x212>
 8004d80:	2310      	movs	r3, #16
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e0a9      	b.n	8004eda <UART_SetConfig+0x212>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8004f48 <UART_SetConfig+0x280>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d124      	bne.n	8004dda <UART_SetConfig+0x112>
 8004d90:	4b6c      	ldr	r3, [pc, #432]	@ (8004f44 <UART_SetConfig+0x27c>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d9c:	d011      	beq.n	8004dc2 <UART_SetConfig+0xfa>
 8004d9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004da2:	d817      	bhi.n	8004dd4 <UART_SetConfig+0x10c>
 8004da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004da8:	d011      	beq.n	8004dce <UART_SetConfig+0x106>
 8004daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dae:	d811      	bhi.n	8004dd4 <UART_SetConfig+0x10c>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <UART_SetConfig+0xf4>
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db8:	d006      	beq.n	8004dc8 <UART_SetConfig+0x100>
 8004dba:	e00b      	b.n	8004dd4 <UART_SetConfig+0x10c>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e08b      	b.n	8004eda <UART_SetConfig+0x212>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e088      	b.n	8004eda <UART_SetConfig+0x212>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e085      	b.n	8004eda <UART_SetConfig+0x212>
 8004dce:	2308      	movs	r3, #8
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e082      	b.n	8004eda <UART_SetConfig+0x212>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e07f      	b.n	8004eda <UART_SetConfig+0x212>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5b      	ldr	r2, [pc, #364]	@ (8004f4c <UART_SetConfig+0x284>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d124      	bne.n	8004e2e <UART_SetConfig+0x166>
 8004de4:	4b57      	ldr	r3, [pc, #348]	@ (8004f44 <UART_SetConfig+0x27c>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004dec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004df0:	d011      	beq.n	8004e16 <UART_SetConfig+0x14e>
 8004df2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004df6:	d817      	bhi.n	8004e28 <UART_SetConfig+0x160>
 8004df8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004dfc:	d011      	beq.n	8004e22 <UART_SetConfig+0x15a>
 8004dfe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e02:	d811      	bhi.n	8004e28 <UART_SetConfig+0x160>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <UART_SetConfig+0x148>
 8004e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e0c:	d006      	beq.n	8004e1c <UART_SetConfig+0x154>
 8004e0e:	e00b      	b.n	8004e28 <UART_SetConfig+0x160>
 8004e10:	2300      	movs	r3, #0
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e061      	b.n	8004eda <UART_SetConfig+0x212>
 8004e16:	2302      	movs	r3, #2
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e05e      	b.n	8004eda <UART_SetConfig+0x212>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e05b      	b.n	8004eda <UART_SetConfig+0x212>
 8004e22:	2308      	movs	r3, #8
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e058      	b.n	8004eda <UART_SetConfig+0x212>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e055      	b.n	8004eda <UART_SetConfig+0x212>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a47      	ldr	r2, [pc, #284]	@ (8004f50 <UART_SetConfig+0x288>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d124      	bne.n	8004e82 <UART_SetConfig+0x1ba>
 8004e38:	4b42      	ldr	r3, [pc, #264]	@ (8004f44 <UART_SetConfig+0x27c>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004e40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e44:	d011      	beq.n	8004e6a <UART_SetConfig+0x1a2>
 8004e46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e4a:	d817      	bhi.n	8004e7c <UART_SetConfig+0x1b4>
 8004e4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e50:	d011      	beq.n	8004e76 <UART_SetConfig+0x1ae>
 8004e52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e56:	d811      	bhi.n	8004e7c <UART_SetConfig+0x1b4>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <UART_SetConfig+0x19c>
 8004e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e60:	d006      	beq.n	8004e70 <UART_SetConfig+0x1a8>
 8004e62:	e00b      	b.n	8004e7c <UART_SetConfig+0x1b4>
 8004e64:	2300      	movs	r3, #0
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e037      	b.n	8004eda <UART_SetConfig+0x212>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e034      	b.n	8004eda <UART_SetConfig+0x212>
 8004e70:	2304      	movs	r3, #4
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e031      	b.n	8004eda <UART_SetConfig+0x212>
 8004e76:	2308      	movs	r3, #8
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e02e      	b.n	8004eda <UART_SetConfig+0x212>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e02b      	b.n	8004eda <UART_SetConfig+0x212>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a33      	ldr	r2, [pc, #204]	@ (8004f54 <UART_SetConfig+0x28c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d124      	bne.n	8004ed6 <UART_SetConfig+0x20e>
 8004e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f44 <UART_SetConfig+0x27c>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004e94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e98:	d011      	beq.n	8004ebe <UART_SetConfig+0x1f6>
 8004e9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e9e:	d817      	bhi.n	8004ed0 <UART_SetConfig+0x208>
 8004ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ea4:	d011      	beq.n	8004eca <UART_SetConfig+0x202>
 8004ea6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eaa:	d811      	bhi.n	8004ed0 <UART_SetConfig+0x208>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <UART_SetConfig+0x1f0>
 8004eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb4:	d006      	beq.n	8004ec4 <UART_SetConfig+0x1fc>
 8004eb6:	e00b      	b.n	8004ed0 <UART_SetConfig+0x208>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e00d      	b.n	8004eda <UART_SetConfig+0x212>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e00a      	b.n	8004eda <UART_SetConfig+0x212>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e007      	b.n	8004eda <UART_SetConfig+0x212>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e004      	b.n	8004eda <UART_SetConfig+0x212>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e001      	b.n	8004eda <UART_SetConfig+0x212>
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee2:	d16b      	bne.n	8004fbc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004ee4:	7ffb      	ldrb	r3, [r7, #31]
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d838      	bhi.n	8004f5c <UART_SetConfig+0x294>
 8004eea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <UART_SetConfig+0x228>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f25 	.word	0x08004f25
 8004efc:	08004f5d 	.word	0x08004f5d
 8004f00:	08004f2b 	.word	0x08004f2b
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f33 	.word	0x08004f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7fe fb3a 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8004f18:	61b8      	str	r0, [r7, #24]
        break;
 8004f1a:	e024      	b.n	8004f66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f1c:	f7fe fb58 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8004f20:	61b8      	str	r0, [r7, #24]
        break;
 8004f22:	e020      	b.n	8004f66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f24:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <UART_SetConfig+0x290>)
 8004f26:	61bb      	str	r3, [r7, #24]
        break;
 8004f28:	e01d      	b.n	8004f66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2a:	f7fe facf 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8004f2e:	61b8      	str	r0, [r7, #24]
        break;
 8004f30:	e019      	b.n	8004f66 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f36:	61bb      	str	r3, [r7, #24]
        break;
 8004f38:	e015      	b.n	8004f66 <UART_SetConfig+0x29e>
 8004f3a:	bf00      	nop
 8004f3c:	efff69f3 	.word	0xefff69f3
 8004f40:	40013800 	.word	0x40013800
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40004400 	.word	0x40004400
 8004f4c:	40004800 	.word	0x40004800
 8004f50:	40004c00 	.word	0x40004c00
 8004f54:	40005000 	.word	0x40005000
 8004f58:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	77bb      	strb	r3, [r7, #30]
        break;
 8004f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d073      	beq.n	8005054 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	005a      	lsls	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b0f      	cmp	r3, #15
 8004f86:	d916      	bls.n	8004fb6 <UART_SetConfig+0x2ee>
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8e:	d212      	bcs.n	8004fb6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f023 030f 	bic.w	r3, r3, #15
 8004f98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	085b      	lsrs	r3, r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	89fb      	ldrh	r3, [r7, #14]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	89fa      	ldrh	r2, [r7, #14]
 8004fb2:	60da      	str	r2, [r3, #12]
 8004fb4:	e04e      	b.n	8005054 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	77bb      	strb	r3, [r7, #30]
 8004fba:	e04b      	b.n	8005054 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fbc:	7ffb      	ldrb	r3, [r7, #31]
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d827      	bhi.n	8005012 <UART_SetConfig+0x34a>
 8004fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0x300>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005013 	.word	0x08005013
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7fe face 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8004ff0:	61b8      	str	r0, [r7, #24]
        break;
 8004ff2:	e013      	b.n	800501c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fe faec 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8004ff8:	61b8      	str	r0, [r7, #24]
        break;
 8004ffa:	e00f      	b.n	800501c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <UART_SetConfig+0x3a4>)
 8004ffe:	61bb      	str	r3, [r7, #24]
        break;
 8005000:	e00c      	b.n	800501c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fe fa63 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8005006:	61b8      	str	r0, [r7, #24]
        break;
 8005008:	e008      	b.n	800501c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800500e:	61bb      	str	r3, [r7, #24]
        break;
 8005010:	e004      	b.n	800501c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	77bb      	strb	r3, [r7, #30]
        break;
 800501a:	bf00      	nop
    }

    if (pclk != 0U)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d018      	beq.n	8005054 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	085a      	lsrs	r2, r3, #1
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b0f      	cmp	r3, #15
 800503a:	d909      	bls.n	8005050 <UART_SetConfig+0x388>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005042:	d205      	bcs.n	8005050 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e001      	b.n	8005054 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005060:	7fbb      	ldrb	r3, [r7, #30]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	007a1200 	.word	0x007a1200

08005070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01a      	beq.n	8005186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516e:	d10a      	bne.n	8005186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b098      	sub	sp, #96	@ 0x60
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c4:	f7fb fcae 	bl	8000b24 <HAL_GetTick>
 80051c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d12e      	bne.n	8005236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e0:	2200      	movs	r2, #0
 80051e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f88c 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d021      	beq.n	8005236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005206:	653b      	str	r3, [r7, #80]	@ 0x50
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005210:	647b      	str	r3, [r7, #68]	@ 0x44
 8005212:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800521e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e062      	b.n	80052fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b04      	cmp	r3, #4
 8005242:	d149      	bne.n	80052d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f856 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03c      	beq.n	80052d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	623b      	str	r3, [r7, #32]
   return(result);
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800527c:	633b      	str	r3, [r7, #48]	@ 0x30
 800527e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e6      	bne.n	800525e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	69b9      	ldr	r1, [r7, #24]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	617b      	str	r3, [r7, #20]
   return(result);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e011      	b.n	80052fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3758      	adds	r7, #88	@ 0x58
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005314:	e04f      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d04b      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531e:	f7fb fc01 	bl	8000b24 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <UART_WaitOnFlagUntilTimeout+0x30>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e04e      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d037      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b80      	cmp	r3, #128	@ 0x80
 800534a:	d034      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b40      	cmp	r3, #64	@ 0x40
 8005350:	d031      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b08      	cmp	r3, #8
 800535e:	d110      	bne.n	8005382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2208      	movs	r2, #8
 8005366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f838 	bl	80053de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2208      	movs	r2, #8
 8005372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e029      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005390:	d111      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800539a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f81e 	bl	80053de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e00f      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d0a0      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053de:	b480      	push	{r7}
 80053e0:	b095      	sub	sp, #84	@ 0x54
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005404:	643b      	str	r3, [r7, #64]	@ 0x40
 8005406:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800540a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e6      	bne.n	80053e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	61fb      	str	r3, [r7, #28]
   return(result);
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005450:	2b01      	cmp	r3, #1
 8005452:	d118      	bne.n	8005486 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	60bb      	str	r3, [r7, #8]
   return(result);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0310 	bic.w	r3, r3, #16
 8005468:	647b      	str	r3, [r7, #68]	@ 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	613b      	str	r3, [r7, #16]
   return(result);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e6      	bne.n	8005454 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800549a:	bf00      	nop
 800549c:	3754      	adds	r7, #84	@ 0x54
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <siprintf>:
 80054a8:	b40e      	push	{r1, r2, r3}
 80054aa:	b510      	push	{r4, lr}
 80054ac:	b09d      	sub	sp, #116	@ 0x74
 80054ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054b0:	9002      	str	r0, [sp, #8]
 80054b2:	9006      	str	r0, [sp, #24]
 80054b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054b8:	480a      	ldr	r0, [pc, #40]	@ (80054e4 <siprintf+0x3c>)
 80054ba:	9107      	str	r1, [sp, #28]
 80054bc:	9104      	str	r1, [sp, #16]
 80054be:	490a      	ldr	r1, [pc, #40]	@ (80054e8 <siprintf+0x40>)
 80054c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c4:	9105      	str	r1, [sp, #20]
 80054c6:	2400      	movs	r4, #0
 80054c8:	a902      	add	r1, sp, #8
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80054d0:	f000 f994 	bl	80057fc <_svfiprintf_r>
 80054d4:	9b02      	ldr	r3, [sp, #8]
 80054d6:	701c      	strb	r4, [r3, #0]
 80054d8:	b01d      	add	sp, #116	@ 0x74
 80054da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054de:	b003      	add	sp, #12
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	ffff0208 	.word	0xffff0208

080054ec <memset>:
 80054ec:	4402      	add	r2, r0
 80054ee:	4603      	mov	r3, r0
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d100      	bne.n	80054f6 <memset+0xa>
 80054f4:	4770      	bx	lr
 80054f6:	f803 1b01 	strb.w	r1, [r3], #1
 80054fa:	e7f9      	b.n	80054f0 <memset+0x4>

080054fc <__errno>:
 80054fc:	4b01      	ldr	r3, [pc, #4]	@ (8005504 <__errno+0x8>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	2000000c 	.word	0x2000000c

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4d0d      	ldr	r5, [pc, #52]	@ (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	@ (8005544 <__libc_init_array+0x3c>)
 800550e:	1b64      	subs	r4, r4, r5
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2600      	movs	r6, #0
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4d0b      	ldr	r5, [pc, #44]	@ (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	@ (800554c <__libc_init_array+0x44>)
 800551c:	f000 fc64 	bl	8005de8 <_init>
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2600      	movs	r6, #0
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f855 3b04 	ldr.w	r3, [r5], #4
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	08005e7c 	.word	0x08005e7c
 8005544:	08005e7c 	.word	0x08005e7c
 8005548:	08005e7c 	.word	0x08005e7c
 800554c:	08005e80 	.word	0x08005e80

08005550 <__retarget_lock_acquire_recursive>:
 8005550:	4770      	bx	lr

08005552 <__retarget_lock_release_recursive>:
 8005552:	4770      	bx	lr

08005554 <_free_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4605      	mov	r5, r0
 8005558:	2900      	cmp	r1, #0
 800555a:	d041      	beq.n	80055e0 <_free_r+0x8c>
 800555c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005560:	1f0c      	subs	r4, r1, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	bfb8      	it	lt
 8005566:	18e4      	addlt	r4, r4, r3
 8005568:	f000 f8e0 	bl	800572c <__malloc_lock>
 800556c:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <_free_r+0x90>)
 800556e:	6813      	ldr	r3, [r2, #0]
 8005570:	b933      	cbnz	r3, 8005580 <_free_r+0x2c>
 8005572:	6063      	str	r3, [r4, #4]
 8005574:	6014      	str	r4, [r2, #0]
 8005576:	4628      	mov	r0, r5
 8005578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800557c:	f000 b8dc 	b.w	8005738 <__malloc_unlock>
 8005580:	42a3      	cmp	r3, r4
 8005582:	d908      	bls.n	8005596 <_free_r+0x42>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	1821      	adds	r1, r4, r0
 8005588:	428b      	cmp	r3, r1
 800558a:	bf01      	itttt	eq
 800558c:	6819      	ldreq	r1, [r3, #0]
 800558e:	685b      	ldreq	r3, [r3, #4]
 8005590:	1809      	addeq	r1, r1, r0
 8005592:	6021      	streq	r1, [r4, #0]
 8005594:	e7ed      	b.n	8005572 <_free_r+0x1e>
 8005596:	461a      	mov	r2, r3
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	b10b      	cbz	r3, 80055a0 <_free_r+0x4c>
 800559c:	42a3      	cmp	r3, r4
 800559e:	d9fa      	bls.n	8005596 <_free_r+0x42>
 80055a0:	6811      	ldr	r1, [r2, #0]
 80055a2:	1850      	adds	r0, r2, r1
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d10b      	bne.n	80055c0 <_free_r+0x6c>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	4401      	add	r1, r0
 80055ac:	1850      	adds	r0, r2, r1
 80055ae:	4283      	cmp	r3, r0
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	d1e0      	bne.n	8005576 <_free_r+0x22>
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	6053      	str	r3, [r2, #4]
 80055ba:	4408      	add	r0, r1
 80055bc:	6010      	str	r0, [r2, #0]
 80055be:	e7da      	b.n	8005576 <_free_r+0x22>
 80055c0:	d902      	bls.n	80055c8 <_free_r+0x74>
 80055c2:	230c      	movs	r3, #12
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	e7d6      	b.n	8005576 <_free_r+0x22>
 80055c8:	6820      	ldr	r0, [r4, #0]
 80055ca:	1821      	adds	r1, r4, r0
 80055cc:	428b      	cmp	r3, r1
 80055ce:	bf04      	itt	eq
 80055d0:	6819      	ldreq	r1, [r3, #0]
 80055d2:	685b      	ldreq	r3, [r3, #4]
 80055d4:	6063      	str	r3, [r4, #4]
 80055d6:	bf04      	itt	eq
 80055d8:	1809      	addeq	r1, r1, r0
 80055da:	6021      	streq	r1, [r4, #0]
 80055dc:	6054      	str	r4, [r2, #4]
 80055de:	e7ca      	b.n	8005576 <_free_r+0x22>
 80055e0:	bd38      	pop	{r3, r4, r5, pc}
 80055e2:	bf00      	nop
 80055e4:	2000030c 	.word	0x2000030c

080055e8 <sbrk_aligned>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005628 <sbrk_aligned+0x40>)
 80055ec:	460c      	mov	r4, r1
 80055ee:	6831      	ldr	r1, [r6, #0]
 80055f0:	4605      	mov	r5, r0
 80055f2:	b911      	cbnz	r1, 80055fa <sbrk_aligned+0x12>
 80055f4:	f000 fba4 	bl	8005d40 <_sbrk_r>
 80055f8:	6030      	str	r0, [r6, #0]
 80055fa:	4621      	mov	r1, r4
 80055fc:	4628      	mov	r0, r5
 80055fe:	f000 fb9f 	bl	8005d40 <_sbrk_r>
 8005602:	1c43      	adds	r3, r0, #1
 8005604:	d103      	bne.n	800560e <sbrk_aligned+0x26>
 8005606:	f04f 34ff 	mov.w	r4, #4294967295
 800560a:	4620      	mov	r0, r4
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	1cc4      	adds	r4, r0, #3
 8005610:	f024 0403 	bic.w	r4, r4, #3
 8005614:	42a0      	cmp	r0, r4
 8005616:	d0f8      	beq.n	800560a <sbrk_aligned+0x22>
 8005618:	1a21      	subs	r1, r4, r0
 800561a:	4628      	mov	r0, r5
 800561c:	f000 fb90 	bl	8005d40 <_sbrk_r>
 8005620:	3001      	adds	r0, #1
 8005622:	d1f2      	bne.n	800560a <sbrk_aligned+0x22>
 8005624:	e7ef      	b.n	8005606 <sbrk_aligned+0x1e>
 8005626:	bf00      	nop
 8005628:	20000308 	.word	0x20000308

0800562c <_malloc_r>:
 800562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005630:	1ccd      	adds	r5, r1, #3
 8005632:	f025 0503 	bic.w	r5, r5, #3
 8005636:	3508      	adds	r5, #8
 8005638:	2d0c      	cmp	r5, #12
 800563a:	bf38      	it	cc
 800563c:	250c      	movcc	r5, #12
 800563e:	2d00      	cmp	r5, #0
 8005640:	4606      	mov	r6, r0
 8005642:	db01      	blt.n	8005648 <_malloc_r+0x1c>
 8005644:	42a9      	cmp	r1, r5
 8005646:	d904      	bls.n	8005652 <_malloc_r+0x26>
 8005648:	230c      	movs	r3, #12
 800564a:	6033      	str	r3, [r6, #0]
 800564c:	2000      	movs	r0, #0
 800564e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005728 <_malloc_r+0xfc>
 8005656:	f000 f869 	bl	800572c <__malloc_lock>
 800565a:	f8d8 3000 	ldr.w	r3, [r8]
 800565e:	461c      	mov	r4, r3
 8005660:	bb44      	cbnz	r4, 80056b4 <_malloc_r+0x88>
 8005662:	4629      	mov	r1, r5
 8005664:	4630      	mov	r0, r6
 8005666:	f7ff ffbf 	bl	80055e8 <sbrk_aligned>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	4604      	mov	r4, r0
 800566e:	d158      	bne.n	8005722 <_malloc_r+0xf6>
 8005670:	f8d8 4000 	ldr.w	r4, [r8]
 8005674:	4627      	mov	r7, r4
 8005676:	2f00      	cmp	r7, #0
 8005678:	d143      	bne.n	8005702 <_malloc_r+0xd6>
 800567a:	2c00      	cmp	r4, #0
 800567c:	d04b      	beq.n	8005716 <_malloc_r+0xea>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	4639      	mov	r1, r7
 8005682:	4630      	mov	r0, r6
 8005684:	eb04 0903 	add.w	r9, r4, r3
 8005688:	f000 fb5a 	bl	8005d40 <_sbrk_r>
 800568c:	4581      	cmp	r9, r0
 800568e:	d142      	bne.n	8005716 <_malloc_r+0xea>
 8005690:	6821      	ldr	r1, [r4, #0]
 8005692:	1a6d      	subs	r5, r5, r1
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f7ff ffa6 	bl	80055e8 <sbrk_aligned>
 800569c:	3001      	adds	r0, #1
 800569e:	d03a      	beq.n	8005716 <_malloc_r+0xea>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	442b      	add	r3, r5
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	f8d8 3000 	ldr.w	r3, [r8]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	bb62      	cbnz	r2, 8005708 <_malloc_r+0xdc>
 80056ae:	f8c8 7000 	str.w	r7, [r8]
 80056b2:	e00f      	b.n	80056d4 <_malloc_r+0xa8>
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	1b52      	subs	r2, r2, r5
 80056b8:	d420      	bmi.n	80056fc <_malloc_r+0xd0>
 80056ba:	2a0b      	cmp	r2, #11
 80056bc:	d917      	bls.n	80056ee <_malloc_r+0xc2>
 80056be:	1961      	adds	r1, r4, r5
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	6025      	str	r5, [r4, #0]
 80056c4:	bf18      	it	ne
 80056c6:	6059      	strne	r1, [r3, #4]
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	bf08      	it	eq
 80056cc:	f8c8 1000 	streq.w	r1, [r8]
 80056d0:	5162      	str	r2, [r4, r5]
 80056d2:	604b      	str	r3, [r1, #4]
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 f82f 	bl	8005738 <__malloc_unlock>
 80056da:	f104 000b 	add.w	r0, r4, #11
 80056de:	1d23      	adds	r3, r4, #4
 80056e0:	f020 0007 	bic.w	r0, r0, #7
 80056e4:	1ac2      	subs	r2, r0, r3
 80056e6:	bf1c      	itt	ne
 80056e8:	1a1b      	subne	r3, r3, r0
 80056ea:	50a3      	strne	r3, [r4, r2]
 80056ec:	e7af      	b.n	800564e <_malloc_r+0x22>
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	bf0c      	ite	eq
 80056f4:	f8c8 2000 	streq.w	r2, [r8]
 80056f8:	605a      	strne	r2, [r3, #4]
 80056fa:	e7eb      	b.n	80056d4 <_malloc_r+0xa8>
 80056fc:	4623      	mov	r3, r4
 80056fe:	6864      	ldr	r4, [r4, #4]
 8005700:	e7ae      	b.n	8005660 <_malloc_r+0x34>
 8005702:	463c      	mov	r4, r7
 8005704:	687f      	ldr	r7, [r7, #4]
 8005706:	e7b6      	b.n	8005676 <_malloc_r+0x4a>
 8005708:	461a      	mov	r2, r3
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	42a3      	cmp	r3, r4
 800570e:	d1fb      	bne.n	8005708 <_malloc_r+0xdc>
 8005710:	2300      	movs	r3, #0
 8005712:	6053      	str	r3, [r2, #4]
 8005714:	e7de      	b.n	80056d4 <_malloc_r+0xa8>
 8005716:	230c      	movs	r3, #12
 8005718:	6033      	str	r3, [r6, #0]
 800571a:	4630      	mov	r0, r6
 800571c:	f000 f80c 	bl	8005738 <__malloc_unlock>
 8005720:	e794      	b.n	800564c <_malloc_r+0x20>
 8005722:	6005      	str	r5, [r0, #0]
 8005724:	e7d6      	b.n	80056d4 <_malloc_r+0xa8>
 8005726:	bf00      	nop
 8005728:	2000030c 	.word	0x2000030c

0800572c <__malloc_lock>:
 800572c:	4801      	ldr	r0, [pc, #4]	@ (8005734 <__malloc_lock+0x8>)
 800572e:	f7ff bf0f 	b.w	8005550 <__retarget_lock_acquire_recursive>
 8005732:	bf00      	nop
 8005734:	20000304 	.word	0x20000304

08005738 <__malloc_unlock>:
 8005738:	4801      	ldr	r0, [pc, #4]	@ (8005740 <__malloc_unlock+0x8>)
 800573a:	f7ff bf0a 	b.w	8005552 <__retarget_lock_release_recursive>
 800573e:	bf00      	nop
 8005740:	20000304 	.word	0x20000304

08005744 <__ssputs_r>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	688e      	ldr	r6, [r1, #8]
 800574a:	461f      	mov	r7, r3
 800574c:	42be      	cmp	r6, r7
 800574e:	680b      	ldr	r3, [r1, #0]
 8005750:	4682      	mov	sl, r0
 8005752:	460c      	mov	r4, r1
 8005754:	4690      	mov	r8, r2
 8005756:	d82d      	bhi.n	80057b4 <__ssputs_r+0x70>
 8005758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800575c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005760:	d026      	beq.n	80057b0 <__ssputs_r+0x6c>
 8005762:	6965      	ldr	r5, [r4, #20]
 8005764:	6909      	ldr	r1, [r1, #16]
 8005766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800576a:	eba3 0901 	sub.w	r9, r3, r1
 800576e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005772:	1c7b      	adds	r3, r7, #1
 8005774:	444b      	add	r3, r9
 8005776:	106d      	asrs	r5, r5, #1
 8005778:	429d      	cmp	r5, r3
 800577a:	bf38      	it	cc
 800577c:	461d      	movcc	r5, r3
 800577e:	0553      	lsls	r3, r2, #21
 8005780:	d527      	bpl.n	80057d2 <__ssputs_r+0x8e>
 8005782:	4629      	mov	r1, r5
 8005784:	f7ff ff52 	bl	800562c <_malloc_r>
 8005788:	4606      	mov	r6, r0
 800578a:	b360      	cbz	r0, 80057e6 <__ssputs_r+0xa2>
 800578c:	6921      	ldr	r1, [r4, #16]
 800578e:	464a      	mov	r2, r9
 8005790:	f000 fae6 	bl	8005d60 <memcpy>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800579a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	6126      	str	r6, [r4, #16]
 80057a2:	6165      	str	r5, [r4, #20]
 80057a4:	444e      	add	r6, r9
 80057a6:	eba5 0509 	sub.w	r5, r5, r9
 80057aa:	6026      	str	r6, [r4, #0]
 80057ac:	60a5      	str	r5, [r4, #8]
 80057ae:	463e      	mov	r6, r7
 80057b0:	42be      	cmp	r6, r7
 80057b2:	d900      	bls.n	80057b6 <__ssputs_r+0x72>
 80057b4:	463e      	mov	r6, r7
 80057b6:	6820      	ldr	r0, [r4, #0]
 80057b8:	4632      	mov	r2, r6
 80057ba:	4641      	mov	r1, r8
 80057bc:	f000 faa6 	bl	8005d0c <memmove>
 80057c0:	68a3      	ldr	r3, [r4, #8]
 80057c2:	1b9b      	subs	r3, r3, r6
 80057c4:	60a3      	str	r3, [r4, #8]
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	4433      	add	r3, r6
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	2000      	movs	r0, #0
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d2:	462a      	mov	r2, r5
 80057d4:	f000 fad2 	bl	8005d7c <_realloc_r>
 80057d8:	4606      	mov	r6, r0
 80057da:	2800      	cmp	r0, #0
 80057dc:	d1e0      	bne.n	80057a0 <__ssputs_r+0x5c>
 80057de:	6921      	ldr	r1, [r4, #16]
 80057e0:	4650      	mov	r0, sl
 80057e2:	f7ff feb7 	bl	8005554 <_free_r>
 80057e6:	230c      	movs	r3, #12
 80057e8:	f8ca 3000 	str.w	r3, [sl]
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	e7e9      	b.n	80057ce <__ssputs_r+0x8a>
	...

080057fc <_svfiprintf_r>:
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4698      	mov	r8, r3
 8005802:	898b      	ldrh	r3, [r1, #12]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	b09d      	sub	sp, #116	@ 0x74
 8005808:	4607      	mov	r7, r0
 800580a:	460d      	mov	r5, r1
 800580c:	4614      	mov	r4, r2
 800580e:	d510      	bpl.n	8005832 <_svfiprintf_r+0x36>
 8005810:	690b      	ldr	r3, [r1, #16]
 8005812:	b973      	cbnz	r3, 8005832 <_svfiprintf_r+0x36>
 8005814:	2140      	movs	r1, #64	@ 0x40
 8005816:	f7ff ff09 	bl	800562c <_malloc_r>
 800581a:	6028      	str	r0, [r5, #0]
 800581c:	6128      	str	r0, [r5, #16]
 800581e:	b930      	cbnz	r0, 800582e <_svfiprintf_r+0x32>
 8005820:	230c      	movs	r3, #12
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	b01d      	add	sp, #116	@ 0x74
 800582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582e:	2340      	movs	r3, #64	@ 0x40
 8005830:	616b      	str	r3, [r5, #20]
 8005832:	2300      	movs	r3, #0
 8005834:	9309      	str	r3, [sp, #36]	@ 0x24
 8005836:	2320      	movs	r3, #32
 8005838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800583c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005840:	2330      	movs	r3, #48	@ 0x30
 8005842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059e0 <_svfiprintf_r+0x1e4>
 8005846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800584a:	f04f 0901 	mov.w	r9, #1
 800584e:	4623      	mov	r3, r4
 8005850:	469a      	mov	sl, r3
 8005852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005856:	b10a      	cbz	r2, 800585c <_svfiprintf_r+0x60>
 8005858:	2a25      	cmp	r2, #37	@ 0x25
 800585a:	d1f9      	bne.n	8005850 <_svfiprintf_r+0x54>
 800585c:	ebba 0b04 	subs.w	fp, sl, r4
 8005860:	d00b      	beq.n	800587a <_svfiprintf_r+0x7e>
 8005862:	465b      	mov	r3, fp
 8005864:	4622      	mov	r2, r4
 8005866:	4629      	mov	r1, r5
 8005868:	4638      	mov	r0, r7
 800586a:	f7ff ff6b 	bl	8005744 <__ssputs_r>
 800586e:	3001      	adds	r0, #1
 8005870:	f000 80a7 	beq.w	80059c2 <_svfiprintf_r+0x1c6>
 8005874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005876:	445a      	add	r2, fp
 8005878:	9209      	str	r2, [sp, #36]	@ 0x24
 800587a:	f89a 3000 	ldrb.w	r3, [sl]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 809f 	beq.w	80059c2 <_svfiprintf_r+0x1c6>
 8005884:	2300      	movs	r3, #0
 8005886:	f04f 32ff 	mov.w	r2, #4294967295
 800588a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800588e:	f10a 0a01 	add.w	sl, sl, #1
 8005892:	9304      	str	r3, [sp, #16]
 8005894:	9307      	str	r3, [sp, #28]
 8005896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800589a:	931a      	str	r3, [sp, #104]	@ 0x68
 800589c:	4654      	mov	r4, sl
 800589e:	2205      	movs	r2, #5
 80058a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a4:	484e      	ldr	r0, [pc, #312]	@ (80059e0 <_svfiprintf_r+0x1e4>)
 80058a6:	f7fa fca3 	bl	80001f0 <memchr>
 80058aa:	9a04      	ldr	r2, [sp, #16]
 80058ac:	b9d8      	cbnz	r0, 80058e6 <_svfiprintf_r+0xea>
 80058ae:	06d0      	lsls	r0, r2, #27
 80058b0:	bf44      	itt	mi
 80058b2:	2320      	movmi	r3, #32
 80058b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058b8:	0711      	lsls	r1, r2, #28
 80058ba:	bf44      	itt	mi
 80058bc:	232b      	movmi	r3, #43	@ 0x2b
 80058be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058c2:	f89a 3000 	ldrb.w	r3, [sl]
 80058c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80058c8:	d015      	beq.n	80058f6 <_svfiprintf_r+0xfa>
 80058ca:	9a07      	ldr	r2, [sp, #28]
 80058cc:	4654      	mov	r4, sl
 80058ce:	2000      	movs	r0, #0
 80058d0:	f04f 0c0a 	mov.w	ip, #10
 80058d4:	4621      	mov	r1, r4
 80058d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058da:	3b30      	subs	r3, #48	@ 0x30
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d94b      	bls.n	8005978 <_svfiprintf_r+0x17c>
 80058e0:	b1b0      	cbz	r0, 8005910 <_svfiprintf_r+0x114>
 80058e2:	9207      	str	r2, [sp, #28]
 80058e4:	e014      	b.n	8005910 <_svfiprintf_r+0x114>
 80058e6:	eba0 0308 	sub.w	r3, r0, r8
 80058ea:	fa09 f303 	lsl.w	r3, r9, r3
 80058ee:	4313      	orrs	r3, r2
 80058f0:	9304      	str	r3, [sp, #16]
 80058f2:	46a2      	mov	sl, r4
 80058f4:	e7d2      	b.n	800589c <_svfiprintf_r+0xa0>
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	1d19      	adds	r1, r3, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	9103      	str	r1, [sp, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	bfbb      	ittet	lt
 8005902:	425b      	neglt	r3, r3
 8005904:	f042 0202 	orrlt.w	r2, r2, #2
 8005908:	9307      	strge	r3, [sp, #28]
 800590a:	9307      	strlt	r3, [sp, #28]
 800590c:	bfb8      	it	lt
 800590e:	9204      	strlt	r2, [sp, #16]
 8005910:	7823      	ldrb	r3, [r4, #0]
 8005912:	2b2e      	cmp	r3, #46	@ 0x2e
 8005914:	d10a      	bne.n	800592c <_svfiprintf_r+0x130>
 8005916:	7863      	ldrb	r3, [r4, #1]
 8005918:	2b2a      	cmp	r3, #42	@ 0x2a
 800591a:	d132      	bne.n	8005982 <_svfiprintf_r+0x186>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	1d1a      	adds	r2, r3, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	9203      	str	r2, [sp, #12]
 8005924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005928:	3402      	adds	r4, #2
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059f0 <_svfiprintf_r+0x1f4>
 8005930:	7821      	ldrb	r1, [r4, #0]
 8005932:	2203      	movs	r2, #3
 8005934:	4650      	mov	r0, sl
 8005936:	f7fa fc5b 	bl	80001f0 <memchr>
 800593a:	b138      	cbz	r0, 800594c <_svfiprintf_r+0x150>
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	eba0 000a 	sub.w	r0, r0, sl
 8005942:	2240      	movs	r2, #64	@ 0x40
 8005944:	4082      	lsls	r2, r0
 8005946:	4313      	orrs	r3, r2
 8005948:	3401      	adds	r4, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005950:	4824      	ldr	r0, [pc, #144]	@ (80059e4 <_svfiprintf_r+0x1e8>)
 8005952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005956:	2206      	movs	r2, #6
 8005958:	f7fa fc4a 	bl	80001f0 <memchr>
 800595c:	2800      	cmp	r0, #0
 800595e:	d036      	beq.n	80059ce <_svfiprintf_r+0x1d2>
 8005960:	4b21      	ldr	r3, [pc, #132]	@ (80059e8 <_svfiprintf_r+0x1ec>)
 8005962:	bb1b      	cbnz	r3, 80059ac <_svfiprintf_r+0x1b0>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	3307      	adds	r3, #7
 8005968:	f023 0307 	bic.w	r3, r3, #7
 800596c:	3308      	adds	r3, #8
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005972:	4433      	add	r3, r6
 8005974:	9309      	str	r3, [sp, #36]	@ 0x24
 8005976:	e76a      	b.n	800584e <_svfiprintf_r+0x52>
 8005978:	fb0c 3202 	mla	r2, ip, r2, r3
 800597c:	460c      	mov	r4, r1
 800597e:	2001      	movs	r0, #1
 8005980:	e7a8      	b.n	80058d4 <_svfiprintf_r+0xd8>
 8005982:	2300      	movs	r3, #0
 8005984:	3401      	adds	r4, #1
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	4619      	mov	r1, r3
 800598a:	f04f 0c0a 	mov.w	ip, #10
 800598e:	4620      	mov	r0, r4
 8005990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005994:	3a30      	subs	r2, #48	@ 0x30
 8005996:	2a09      	cmp	r2, #9
 8005998:	d903      	bls.n	80059a2 <_svfiprintf_r+0x1a6>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0c6      	beq.n	800592c <_svfiprintf_r+0x130>
 800599e:	9105      	str	r1, [sp, #20]
 80059a0:	e7c4      	b.n	800592c <_svfiprintf_r+0x130>
 80059a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a6:	4604      	mov	r4, r0
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7f0      	b.n	800598e <_svfiprintf_r+0x192>
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <_svfiprintf_r+0x1f0>)
 80059b4:	a904      	add	r1, sp, #16
 80059b6:	4638      	mov	r0, r7
 80059b8:	f3af 8000 	nop.w
 80059bc:	1c42      	adds	r2, r0, #1
 80059be:	4606      	mov	r6, r0
 80059c0:	d1d6      	bne.n	8005970 <_svfiprintf_r+0x174>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	065b      	lsls	r3, r3, #25
 80059c6:	f53f af2d 	bmi.w	8005824 <_svfiprintf_r+0x28>
 80059ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059cc:	e72c      	b.n	8005828 <_svfiprintf_r+0x2c>
 80059ce:	ab03      	add	r3, sp, #12
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	462a      	mov	r2, r5
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <_svfiprintf_r+0x1f0>)
 80059d6:	a904      	add	r1, sp, #16
 80059d8:	4638      	mov	r0, r7
 80059da:	f000 f879 	bl	8005ad0 <_printf_i>
 80059de:	e7ed      	b.n	80059bc <_svfiprintf_r+0x1c0>
 80059e0:	08005e40 	.word	0x08005e40
 80059e4:	08005e4a 	.word	0x08005e4a
 80059e8:	00000000 	.word	0x00000000
 80059ec:	08005745 	.word	0x08005745
 80059f0:	08005e46 	.word	0x08005e46

080059f4 <_printf_common>:
 80059f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f8:	4616      	mov	r6, r2
 80059fa:	4698      	mov	r8, r3
 80059fc:	688a      	ldr	r2, [r1, #8]
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	bfb8      	it	lt
 8005a08:	4613      	movlt	r3, r2
 8005a0a:	6033      	str	r3, [r6, #0]
 8005a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a10:	4607      	mov	r7, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	b10a      	cbz	r2, 8005a1a <_printf_common+0x26>
 8005a16:	3301      	adds	r3, #1
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	0699      	lsls	r1, r3, #26
 8005a1e:	bf42      	ittt	mi
 8005a20:	6833      	ldrmi	r3, [r6, #0]
 8005a22:	3302      	addmi	r3, #2
 8005a24:	6033      	strmi	r3, [r6, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	f015 0506 	ands.w	r5, r5, #6
 8005a2c:	d106      	bne.n	8005a3c <_printf_common+0x48>
 8005a2e:	f104 0a19 	add.w	sl, r4, #25
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	6832      	ldr	r2, [r6, #0]
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dc26      	bgt.n	8005a8a <_printf_common+0x96>
 8005a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a40:	6822      	ldr	r2, [r4, #0]
 8005a42:	3b00      	subs	r3, #0
 8005a44:	bf18      	it	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	0692      	lsls	r2, r2, #26
 8005a4a:	d42b      	bmi.n	8005aa4 <_printf_common+0xb0>
 8005a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a50:	4641      	mov	r1, r8
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c8      	blx	r9
 8005a56:	3001      	adds	r0, #1
 8005a58:	d01e      	beq.n	8005a98 <_printf_common+0xa4>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	6922      	ldr	r2, [r4, #16]
 8005a5e:	f003 0306 	and.w	r3, r3, #6
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	bf02      	ittt	eq
 8005a66:	68e5      	ldreq	r5, [r4, #12]
 8005a68:	6833      	ldreq	r3, [r6, #0]
 8005a6a:	1aed      	subeq	r5, r5, r3
 8005a6c:	68a3      	ldr	r3, [r4, #8]
 8005a6e:	bf0c      	ite	eq
 8005a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a74:	2500      	movne	r5, #0
 8005a76:	4293      	cmp	r3, r2
 8005a78:	bfc4      	itt	gt
 8005a7a:	1a9b      	subgt	r3, r3, r2
 8005a7c:	18ed      	addgt	r5, r5, r3
 8005a7e:	2600      	movs	r6, #0
 8005a80:	341a      	adds	r4, #26
 8005a82:	42b5      	cmp	r5, r6
 8005a84:	d11a      	bne.n	8005abc <_printf_common+0xc8>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e008      	b.n	8005a9c <_printf_common+0xa8>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4641      	mov	r1, r8
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c8      	blx	r9
 8005a94:	3001      	adds	r0, #1
 8005a96:	d103      	bne.n	8005aa0 <_printf_common+0xac>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	e7c6      	b.n	8005a32 <_printf_common+0x3e>
 8005aa4:	18e1      	adds	r1, r4, r3
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	2030      	movs	r0, #48	@ 0x30
 8005aaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005aae:	4422      	add	r2, r4
 8005ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ab4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ab8:	3302      	adds	r3, #2
 8005aba:	e7c7      	b.n	8005a4c <_printf_common+0x58>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c8      	blx	r9
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0e6      	beq.n	8005a98 <_printf_common+0xa4>
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7d9      	b.n	8005a82 <_printf_common+0x8e>
	...

08005ad0 <_printf_i>:
 8005ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad4:	7e0f      	ldrb	r7, [r1, #24]
 8005ad6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ad8:	2f78      	cmp	r7, #120	@ 0x78
 8005ada:	4691      	mov	r9, r2
 8005adc:	4680      	mov	r8, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	469a      	mov	sl, r3
 8005ae2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ae6:	d807      	bhi.n	8005af8 <_printf_i+0x28>
 8005ae8:	2f62      	cmp	r7, #98	@ 0x62
 8005aea:	d80a      	bhi.n	8005b02 <_printf_i+0x32>
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f000 80d1 	beq.w	8005c94 <_printf_i+0x1c4>
 8005af2:	2f58      	cmp	r7, #88	@ 0x58
 8005af4:	f000 80b8 	beq.w	8005c68 <_printf_i+0x198>
 8005af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005afc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b00:	e03a      	b.n	8005b78 <_printf_i+0xa8>
 8005b02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b06:	2b15      	cmp	r3, #21
 8005b08:	d8f6      	bhi.n	8005af8 <_printf_i+0x28>
 8005b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b10 <_printf_i+0x40>)
 8005b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b7d 	.word	0x08005b7d
 8005b18:	08005af9 	.word	0x08005af9
 8005b1c:	08005af9 	.word	0x08005af9
 8005b20:	08005af9 	.word	0x08005af9
 8005b24:	08005af9 	.word	0x08005af9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005af9 	.word	0x08005af9
 8005b30:	08005af9 	.word	0x08005af9
 8005b34:	08005af9 	.word	0x08005af9
 8005b38:	08005af9 	.word	0x08005af9
 8005b3c:	08005c7b 	.word	0x08005c7b
 8005b40:	08005ba7 	.word	0x08005ba7
 8005b44:	08005c35 	.word	0x08005c35
 8005b48:	08005af9 	.word	0x08005af9
 8005b4c:	08005af9 	.word	0x08005af9
 8005b50:	08005c9d 	.word	0x08005c9d
 8005b54:	08005af9 	.word	0x08005af9
 8005b58:	08005ba7 	.word	0x08005ba7
 8005b5c:	08005af9 	.word	0x08005af9
 8005b60:	08005af9 	.word	0x08005af9
 8005b64:	08005c3d 	.word	0x08005c3d
 8005b68:	6833      	ldr	r3, [r6, #0]
 8005b6a:	1d1a      	adds	r2, r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6032      	str	r2, [r6, #0]
 8005b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e09c      	b.n	8005cb6 <_printf_i+0x1e6>
 8005b7c:	6833      	ldr	r3, [r6, #0]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	6031      	str	r1, [r6, #0]
 8005b84:	0606      	lsls	r6, r0, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xbc>
 8005b88:	681d      	ldr	r5, [r3, #0]
 8005b8a:	e003      	b.n	8005b94 <_printf_i+0xc4>
 8005b8c:	0645      	lsls	r5, r0, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xb8>
 8005b90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b94:	2d00      	cmp	r5, #0
 8005b96:	da03      	bge.n	8005ba0 <_printf_i+0xd0>
 8005b98:	232d      	movs	r3, #45	@ 0x2d
 8005b9a:	426d      	negs	r5, r5
 8005b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba0:	4858      	ldr	r0, [pc, #352]	@ (8005d04 <_printf_i+0x234>)
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	e011      	b.n	8005bca <_printf_i+0xfa>
 8005ba6:	6821      	ldr	r1, [r4, #0]
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	0608      	lsls	r0, r1, #24
 8005bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bb0:	d402      	bmi.n	8005bb8 <_printf_i+0xe8>
 8005bb2:	0649      	lsls	r1, r1, #25
 8005bb4:	bf48      	it	mi
 8005bb6:	b2ad      	uxthmi	r5, r5
 8005bb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bba:	4852      	ldr	r0, [pc, #328]	@ (8005d04 <_printf_i+0x234>)
 8005bbc:	6033      	str	r3, [r6, #0]
 8005bbe:	bf14      	ite	ne
 8005bc0:	230a      	movne	r3, #10
 8005bc2:	2308      	moveq	r3, #8
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bca:	6866      	ldr	r6, [r4, #4]
 8005bcc:	60a6      	str	r6, [r4, #8]
 8005bce:	2e00      	cmp	r6, #0
 8005bd0:	db05      	blt.n	8005bde <_printf_i+0x10e>
 8005bd2:	6821      	ldr	r1, [r4, #0]
 8005bd4:	432e      	orrs	r6, r5
 8005bd6:	f021 0104 	bic.w	r1, r1, #4
 8005bda:	6021      	str	r1, [r4, #0]
 8005bdc:	d04b      	beq.n	8005c76 <_printf_i+0x1a6>
 8005bde:	4616      	mov	r6, r2
 8005be0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005be4:	fb03 5711 	mls	r7, r3, r1, r5
 8005be8:	5dc7      	ldrb	r7, [r0, r7]
 8005bea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bee:	462f      	mov	r7, r5
 8005bf0:	42bb      	cmp	r3, r7
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	d9f4      	bls.n	8005be0 <_printf_i+0x110>
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d10b      	bne.n	8005c12 <_printf_i+0x142>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	07df      	lsls	r7, r3, #31
 8005bfe:	d508      	bpl.n	8005c12 <_printf_i+0x142>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	6861      	ldr	r1, [r4, #4]
 8005c04:	4299      	cmp	r1, r3
 8005c06:	bfde      	ittt	le
 8005c08:	2330      	movle	r3, #48	@ 0x30
 8005c0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c12:	1b92      	subs	r2, r2, r6
 8005c14:	6122      	str	r2, [r4, #16]
 8005c16:	f8cd a000 	str.w	sl, [sp]
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	aa03      	add	r2, sp, #12
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4640      	mov	r0, r8
 8005c22:	f7ff fee7 	bl	80059f4 <_printf_common>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d14a      	bne.n	8005cc0 <_printf_i+0x1f0>
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	b004      	add	sp, #16
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	f043 0320 	orr.w	r3, r3, #32
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	4832      	ldr	r0, [pc, #200]	@ (8005d08 <_printf_i+0x238>)
 8005c3e:	2778      	movs	r7, #120	@ 0x78
 8005c40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	6831      	ldr	r1, [r6, #0]
 8005c48:	061f      	lsls	r7, r3, #24
 8005c4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c4e:	d402      	bmi.n	8005c56 <_printf_i+0x186>
 8005c50:	065f      	lsls	r7, r3, #25
 8005c52:	bf48      	it	mi
 8005c54:	b2ad      	uxthmi	r5, r5
 8005c56:	6031      	str	r1, [r6, #0]
 8005c58:	07d9      	lsls	r1, r3, #31
 8005c5a:	bf44      	itt	mi
 8005c5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c60:	6023      	strmi	r3, [r4, #0]
 8005c62:	b11d      	cbz	r5, 8005c6c <_printf_i+0x19c>
 8005c64:	2310      	movs	r3, #16
 8005c66:	e7ad      	b.n	8005bc4 <_printf_i+0xf4>
 8005c68:	4826      	ldr	r0, [pc, #152]	@ (8005d04 <_printf_i+0x234>)
 8005c6a:	e7e9      	b.n	8005c40 <_printf_i+0x170>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	f023 0320 	bic.w	r3, r3, #32
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	e7f6      	b.n	8005c64 <_printf_i+0x194>
 8005c76:	4616      	mov	r6, r2
 8005c78:	e7bd      	b.n	8005bf6 <_printf_i+0x126>
 8005c7a:	6833      	ldr	r3, [r6, #0]
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	6961      	ldr	r1, [r4, #20]
 8005c80:	1d18      	adds	r0, r3, #4
 8005c82:	6030      	str	r0, [r6, #0]
 8005c84:	062e      	lsls	r6, r5, #24
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	d501      	bpl.n	8005c8e <_printf_i+0x1be>
 8005c8a:	6019      	str	r1, [r3, #0]
 8005c8c:	e002      	b.n	8005c94 <_printf_i+0x1c4>
 8005c8e:	0668      	lsls	r0, r5, #25
 8005c90:	d5fb      	bpl.n	8005c8a <_printf_i+0x1ba>
 8005c92:	8019      	strh	r1, [r3, #0]
 8005c94:	2300      	movs	r3, #0
 8005c96:	6123      	str	r3, [r4, #16]
 8005c98:	4616      	mov	r6, r2
 8005c9a:	e7bc      	b.n	8005c16 <_printf_i+0x146>
 8005c9c:	6833      	ldr	r3, [r6, #0]
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	6032      	str	r2, [r6, #0]
 8005ca2:	681e      	ldr	r6, [r3, #0]
 8005ca4:	6862      	ldr	r2, [r4, #4]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7fa faa1 	bl	80001f0 <memchr>
 8005cae:	b108      	cbz	r0, 8005cb4 <_printf_i+0x1e4>
 8005cb0:	1b80      	subs	r0, r0, r6
 8005cb2:	6060      	str	r0, [r4, #4]
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	6123      	str	r3, [r4, #16]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cbe:	e7aa      	b.n	8005c16 <_printf_i+0x146>
 8005cc0:	6923      	ldr	r3, [r4, #16]
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	47d0      	blx	sl
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d0ad      	beq.n	8005c2a <_printf_i+0x15a>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	079b      	lsls	r3, r3, #30
 8005cd2:	d413      	bmi.n	8005cfc <_printf_i+0x22c>
 8005cd4:	68e0      	ldr	r0, [r4, #12]
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	4298      	cmp	r0, r3
 8005cda:	bfb8      	it	lt
 8005cdc:	4618      	movlt	r0, r3
 8005cde:	e7a6      	b.n	8005c2e <_printf_i+0x15e>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4632      	mov	r2, r6
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	47d0      	blx	sl
 8005cea:	3001      	adds	r0, #1
 8005cec:	d09d      	beq.n	8005c2a <_printf_i+0x15a>
 8005cee:	3501      	adds	r5, #1
 8005cf0:	68e3      	ldr	r3, [r4, #12]
 8005cf2:	9903      	ldr	r1, [sp, #12]
 8005cf4:	1a5b      	subs	r3, r3, r1
 8005cf6:	42ab      	cmp	r3, r5
 8005cf8:	dcf2      	bgt.n	8005ce0 <_printf_i+0x210>
 8005cfa:	e7eb      	b.n	8005cd4 <_printf_i+0x204>
 8005cfc:	2500      	movs	r5, #0
 8005cfe:	f104 0619 	add.w	r6, r4, #25
 8005d02:	e7f5      	b.n	8005cf0 <_printf_i+0x220>
 8005d04:	08005e51 	.word	0x08005e51
 8005d08:	08005e62 	.word	0x08005e62

08005d0c <memmove>:
 8005d0c:	4288      	cmp	r0, r1
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	eb01 0402 	add.w	r4, r1, r2
 8005d14:	d902      	bls.n	8005d1c <memmove+0x10>
 8005d16:	4284      	cmp	r4, r0
 8005d18:	4623      	mov	r3, r4
 8005d1a:	d807      	bhi.n	8005d2c <memmove+0x20>
 8005d1c:	1e43      	subs	r3, r0, #1
 8005d1e:	42a1      	cmp	r1, r4
 8005d20:	d008      	beq.n	8005d34 <memmove+0x28>
 8005d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d2a:	e7f8      	b.n	8005d1e <memmove+0x12>
 8005d2c:	4402      	add	r2, r0
 8005d2e:	4601      	mov	r1, r0
 8005d30:	428a      	cmp	r2, r1
 8005d32:	d100      	bne.n	8005d36 <memmove+0x2a>
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d3e:	e7f7      	b.n	8005d30 <memmove+0x24>

08005d40 <_sbrk_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4d06      	ldr	r5, [pc, #24]	@ (8005d5c <_sbrk_r+0x1c>)
 8005d44:	2300      	movs	r3, #0
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fa fe1e 	bl	800098c <_sbrk>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_sbrk_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_sbrk_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20000300 	.word	0x20000300

08005d60 <memcpy>:
 8005d60:	440a      	add	r2, r1
 8005d62:	4291      	cmp	r1, r2
 8005d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d68:	d100      	bne.n	8005d6c <memcpy+0xc>
 8005d6a:	4770      	bx	lr
 8005d6c:	b510      	push	{r4, lr}
 8005d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d76:	4291      	cmp	r1, r2
 8005d78:	d1f9      	bne.n	8005d6e <memcpy+0xe>
 8005d7a:	bd10      	pop	{r4, pc}

08005d7c <_realloc_r>:
 8005d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	4607      	mov	r7, r0
 8005d82:	4614      	mov	r4, r2
 8005d84:	460d      	mov	r5, r1
 8005d86:	b921      	cbnz	r1, 8005d92 <_realloc_r+0x16>
 8005d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	f7ff bc4d 	b.w	800562c <_malloc_r>
 8005d92:	b92a      	cbnz	r2, 8005da0 <_realloc_r+0x24>
 8005d94:	f7ff fbde 	bl	8005554 <_free_r>
 8005d98:	4625      	mov	r5, r4
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da0:	f000 f81a 	bl	8005dd8 <_malloc_usable_size_r>
 8005da4:	4284      	cmp	r4, r0
 8005da6:	4606      	mov	r6, r0
 8005da8:	d802      	bhi.n	8005db0 <_realloc_r+0x34>
 8005daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dae:	d8f4      	bhi.n	8005d9a <_realloc_r+0x1e>
 8005db0:	4621      	mov	r1, r4
 8005db2:	4638      	mov	r0, r7
 8005db4:	f7ff fc3a 	bl	800562c <_malloc_r>
 8005db8:	4680      	mov	r8, r0
 8005dba:	b908      	cbnz	r0, 8005dc0 <_realloc_r+0x44>
 8005dbc:	4645      	mov	r5, r8
 8005dbe:	e7ec      	b.n	8005d9a <_realloc_r+0x1e>
 8005dc0:	42b4      	cmp	r4, r6
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	bf28      	it	cs
 8005dc8:	4632      	movcs	r2, r6
 8005dca:	f7ff ffc9 	bl	8005d60 <memcpy>
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff fbbf 	bl	8005554 <_free_r>
 8005dd6:	e7f1      	b.n	8005dbc <_realloc_r+0x40>

08005dd8 <_malloc_usable_size_r>:
 8005dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ddc:	1f18      	subs	r0, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bfbc      	itt	lt
 8005de2:	580b      	ldrlt	r3, [r1, r0]
 8005de4:	18c0      	addlt	r0, r0, r3
 8005de6:	4770      	bx	lr

08005de8 <_init>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr

08005df4 <_fini>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr
